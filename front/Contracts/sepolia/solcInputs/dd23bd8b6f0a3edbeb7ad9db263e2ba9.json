{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/LockBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\r\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\r\n\r\n// import {console} from \"hardhat/console.sol\";\r\n\r\ncontract LockBox is Ownable, ERC721Holder, ERC1155Holder {\r\n\r\n    error LockBox__NOT_ALLOWED();\r\n    error LockBox__NOT_PENDING_ANYMORE();\r\n    error LockBox__EXPIRED();\r\n    error LockBox__INSUFFICIENT_FUNDS();\r\n\r\n    uint public counter;\r\n    uint public boxFee = 0.1 ether;\r\n\r\n    mapping (uint => LockBoxInfo) public lockBoxInfo;\r\n\r\n    enum AssetType {NFT, TOKEN, COIN, ERC1155}\r\n    enum Status {PENDING, SUCCEED, FAILED}\r\n    enum ClaimStatus {NOT_CLAIMED, CLAIMED}\r\n    enum LockStatus {NOT_LOCKED, LOCKED}\r\n    enum ApprovalStatus {NOT_APPROVED, APPROVED}\r\n\r\n    modifier onlyLockboxUsers(uint _id) {\r\n        if(_msgSender() != lockBoxInfo[_id].assetA.owner && _msgSender() != lockBoxInfo[_id].assetB.owner){\r\n            revert LockBox__NOT_ALLOWED();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyLockboxOwner(uint _id) {\r\n        if(_msgSender() != lockBoxInfo[_id].lockBoxOwner){\r\n            revert LockBox__NOT_ALLOWED();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier isLockBoxValid(uint _id){\r\n        if(lockBoxInfo[_id].status != Status.PENDING){\r\n            revert LockBox__NOT_PENDING_ANYMORE();\r\n        }\r\n        if(block.timestamp >= lockBoxInfo[_id].expiryTime){\r\n            revert LockBox__EXPIRED();\r\n        }\r\n        _;\r\n    }\r\n\r\n    struct Asset {\r\n        AssetType assetType;\r\n        address owner;\r\n        address assetAddress;\r\n        uint assetID;\r\n        uint assetQuantity;\r\n        LockStatus lockStatus;\r\n        ApprovalStatus approvalStatus;\r\n        ClaimStatus claimStatus;\r\n        address claimedBy;\r\n    }\r\n\r\n    struct LockBoxInfo {\r\n        address lockBoxOwner;\r\n        uint expiryTime;\r\n        Status status;\r\n        Asset assetA;\r\n        Asset assetB;\r\n    }\r\n\r\n    function createLockBox(\r\n        AssetType _assetAtype, address _assetAaddress, uint _assetAID, uint _assetAQuantity,\r\n        AssetType _assetBtype, address _assetBaddress, uint _assetBID, uint _assetBQuantity,\r\n        uint _expiryTime\r\n        ) public payable {\r\n        \r\n        if(msg.value < boxFee){\r\n            revert LockBox__INSUFFICIENT_FUNDS();\r\n        }\r\n\r\n        require(\r\n            _expiryTime > 0 && \r\n            _expiryTime <= 1 days, \r\n            \"Expiry time should be more than now and less than one day\"\r\n            );\r\n\r\n        counter++;\r\n\r\n        Asset memory _assetA = Asset (\r\n            _assetAtype, \r\n            msg.sender,\r\n            _assetAaddress,\r\n            _assetAID,\r\n            _assetAQuantity,\r\n            LockStatus.NOT_LOCKED,\r\n            ApprovalStatus.NOT_APPROVED,\r\n            ClaimStatus.NOT_CLAIMED,\r\n            address(0)\r\n        );\r\n\r\n        Asset memory _assetB = Asset (\r\n            _assetBtype, \r\n            address(0),\r\n            _assetBaddress,\r\n            _assetBID,\r\n            _assetBQuantity,\r\n            LockStatus.NOT_LOCKED,\r\n            ApprovalStatus.NOT_APPROVED,\r\n            ClaimStatus.NOT_CLAIMED,\r\n            address(0)\r\n        );\r\n\r\n        LockBoxInfo memory _lockBox =  LockBoxInfo (\r\n            msg.sender,\r\n            block.timestamp + _expiryTime,\r\n            Status.PENDING,\r\n            _assetA,\r\n            _assetB\r\n        );\r\n\r\n\r\n        lockBoxInfo[counter] = _lockBox;\r\n    \r\n    }\r\n\r\n    function lockAsset(uint _id) public payable isLockBoxValid(_id){\r\n\r\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\r\n        \r\n        if(msg.sender == _lockBox.assetA.owner){\r\n            require(_lockBox.assetA.lockStatus == LockStatus.NOT_LOCKED, \"Asset is already locked\" );\r\n\r\n                    // Submit Asset A\r\n            if(_lockBox.assetA.assetType == AssetType.NFT) {\r\n                IERC721(_lockBox.assetA.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetA.assetID);\r\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\r\n            }\r\n            else if(_lockBox.assetA.assetType == AssetType.ERC1155) {\r\n                IERC1155(_lockBox.assetA.assetAddress).safeTransferFrom(msg.sender, address(this), _lockBox.assetA.assetID, 1, \"\");\r\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\r\n            }\r\n            else if(_lockBox.assetA.assetType == AssetType.TOKEN) {\r\n                IERC20(_lockBox.assetA.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetA.assetQuantity);\r\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\r\n            }\r\n            else if(_lockBox.assetA.assetType == AssetType.COIN) {\r\n                require(msg.value >= _lockBox.assetA.assetQuantity, \"Insufficient locking funds\" );\r\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\r\n            }\r\n        }\r\n\r\n        else {\r\n            require(_lockBox.assetB.lockStatus == LockStatus.NOT_LOCKED, \"Asset is already locked\" );\r\n\r\n            lockBoxInfo[_id].assetB.owner = msg.sender;\r\n\r\n\r\n            if(_lockBox.assetB.assetType == AssetType.NFT) {\r\n                IERC721(_lockBox.assetB.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetB.assetID);\r\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\r\n            }\r\n            else if(_lockBox.assetB.assetType == AssetType.ERC1155) {\r\n                IERC1155(_lockBox.assetB.assetAddress).safeTransferFrom(msg.sender, address(this), _lockBox.assetB.assetID, 1, \"\");\r\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\r\n            }\r\n            else if(_lockBox.assetB.assetType == AssetType.TOKEN) {\r\n                IERC20(_lockBox.assetB.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetB.assetQuantity);\r\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\r\n\r\n            }\r\n            else if(_lockBox.assetB.assetType == AssetType.COIN) {\r\n                require(msg.value >= _lockBox.assetB.assetQuantity, \"Insufficient locking funds\" );\r\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\r\n            }\r\n\r\n        }\r\n            \r\n\r\n    }\r\n\r\n    function approveAsset(uint _id) public onlyLockboxUsers(_id) isLockBoxValid(_id){\r\n\r\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\r\n        \r\n        if(msg.sender == _lockBox.assetA.owner){\r\n            \r\n            require(_lockBox.assetA.lockStatus == LockStatus.LOCKED, \"Asset id not locked\" );\r\n            require(_lockBox.assetA.approvalStatus == ApprovalStatus.NOT_APPROVED, \"Asset is already approved\");\r\n            \r\n            lockBoxInfo[_id].assetA.approvalStatus = ApprovalStatus.APPROVED;\r\n\r\n            if(_lockBox.assetB.approvalStatus == ApprovalStatus.APPROVED){\r\n                lockBoxInfo[_id].status = Status.SUCCEED;\r\n            }\r\n\r\n        }\r\n\r\n        else if(msg.sender == _lockBox.assetB.owner){\r\n\r\n            require(_lockBox.assetB.lockStatus == LockStatus.LOCKED, \"Asset id not locked\" );\r\n            require(_lockBox.assetB.approvalStatus == ApprovalStatus.NOT_APPROVED, \"Asset is already approved\");\r\n            \r\n            lockBoxInfo[_id].assetB.approvalStatus = ApprovalStatus.APPROVED;\r\n\r\n            if(_lockBox.assetA.approvalStatus == ApprovalStatus.APPROVED){\r\n                lockBoxInfo[_id].status = Status.SUCCEED;\r\n            }\r\n        }\r\n\r\n\r\n        \r\n    }\r\n    \r\n    function claimAsset(uint _id) public  onlyLockboxUsers(_id) {\r\n\r\n        if(block.timestamp >= lockBoxInfo[_id].expiryTime){\r\n            lockBoxInfo[_id].status = Status.FAILED;\r\n        }\r\n\r\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\r\n\r\n        require( _lockBox.status != Status.PENDING, \"Nothing to claim\" );\r\n\r\n        if(msg.sender == _lockBox.assetA.owner) {\r\n\r\n            if(_lockBox.status == Status.SUCCEED){\r\n                // require( _lockBox.assetB.claimStatus == ClaimStatus.NOT_CLAIMED, \"Asset B is already claimed\" );\r\n                // require( _lockBox.assetB.lockStatus == LockStatus.LOCKED, \"Asset B is not locked\" );\r\n                // require( _lockBox.assetB.approvalStatus == ApprovalStatus.APPROVED, \"Asset B is not approved\" );\r\n\r\n                lockBoxInfo[_id].assetB.claimedBy = msg.sender;\r\n                lockBoxInfo[_id].assetB.claimStatus = ClaimStatus.CLAIMED;\r\n\r\n                if(_lockBox.assetB.assetType == AssetType.NFT) {\r\n                    IERC721(_lockBox.assetB.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetB.assetID);\r\n                }\r\n                else if(_lockBox.assetB.assetType == AssetType.ERC1155) {\r\n                    IERC1155(_lockBox.assetB.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetB.assetID, 1, \"\");\r\n                }\r\n                else if(_lockBox.assetB.assetType == AssetType.TOKEN) {\r\n                    IERC20(_lockBox.assetB.assetAddress).transfer(msg.sender, _lockBox.assetB.assetQuantity);\r\n                }\r\n                else if(_lockBox.assetB.assetType == AssetType.COIN) {\r\n                    payable(_lockBox.assetA.owner).transfer(_lockBox.assetB.assetQuantity);\r\n                }\r\n            }\r\n\r\n            else if(_lockBox.status == Status.FAILED){\r\n                \r\n                require( _lockBox.assetA.lockStatus == LockStatus.LOCKED, \"Asset A is not locked\" );\r\n                require( _lockBox.assetA.claimStatus == ClaimStatus.NOT_CLAIMED, \"Asset A is already claimed\" );\r\n                // require( _lockBox.assetA.approvalStatus == ApprovalStatus.APPROVED, \"Asset A is not approved\" );\r\n    \r\n                lockBoxInfo[_id].assetA.claimedBy = msg.sender;\r\n                lockBoxInfo[_id].assetA.claimStatus = ClaimStatus.CLAIMED;\r\n\r\n                if(_lockBox.assetA.assetType == AssetType.NFT) {\r\n                    IERC721(_lockBox.assetA.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetA.assetID);\r\n                }\r\n                else if(_lockBox.assetA.assetType == AssetType.ERC1155) {\r\n                    IERC1155(_lockBox.assetA.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetA.assetID, 1, \"\");\r\n                }\r\n                else if(_lockBox.assetA.assetType == AssetType.TOKEN) {\r\n                    IERC20(_lockBox.assetA.assetAddress).transfer(msg.sender, _lockBox.assetA.assetQuantity);\r\n                }\r\n                else if(_lockBox.assetA.assetType == AssetType.COIN) {\r\n                    payable(_lockBox.assetA.owner).transfer(_lockBox.assetA.assetQuantity);\r\n                }\r\n\r\n            }\r\n\r\n            else if(_lockBox.status == Status.PENDING) {\r\n                require( _lockBox.assetA.lockStatus == LockStatus.LOCKED, \"Asset A is not locked\" );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        else if(msg.sender == _lockBox.assetB.owner) {\r\n            \r\n            if(_lockBox.status == Status.SUCCEED) {\r\n                \r\n                // require( _lockBox.assetA.claimStatus == ClaimStatus.NOT_CLAIMED, \"Asset A is already claimed\" );\r\n                // require( _lockBox.assetA.lockStatus == LockStatus.LOCKED, \"Asset A is not locked\" );\r\n                // require( _lockBox.assetA.approvalStatus == ApprovalStatus.APPROVED, \"Asset A is not approved\" );\r\n\r\n                lockBoxInfo[_id].assetA.claimedBy = msg.sender;\r\n                lockBoxInfo[_id].assetA.claimStatus = ClaimStatus.CLAIMED;\r\n\r\n                if(_lockBox.assetA.assetType == AssetType.NFT) {\r\n                    IERC721(_lockBox.assetA.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetA.assetID);\r\n                }\r\n                else if(_lockBox.assetA.assetType == AssetType.ERC1155) {\r\n                    IERC1155(_lockBox.assetA.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetA.assetID, 1, \"\");\r\n                }\r\n                else if(_lockBox.assetA.assetType == AssetType.TOKEN) {\r\n                    IERC20(_lockBox.assetA.assetAddress).transfer(msg.sender, _lockBox.assetA.assetQuantity);\r\n                }\r\n                else if(_lockBox.assetA.assetType == AssetType.COIN) {\r\n                    payable(_lockBox.assetB.owner).transfer(_lockBox.assetA.assetQuantity);\r\n                }\r\n\r\n            }\r\n\r\n            else if(_lockBox.status == Status.FAILED) {\r\n\r\n                require( _lockBox.assetB.claimStatus == ClaimStatus.NOT_CLAIMED, \"Asset B is already claimed\" );\r\n                require( _lockBox.assetB.lockStatus == LockStatus.LOCKED, \"Asset B is not locked\" );\r\n\r\n                lockBoxInfo[_id].assetB.claimStatus = ClaimStatus.CLAIMED;\r\n                lockBoxInfo[_id].assetB.claimedBy = msg.sender;\r\n\r\n                if(_lockBox.assetB.assetType == AssetType.NFT) {\r\n                    IERC721(_lockBox.assetB.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetB.assetID);\r\n                }\r\n                else if(_lockBox.assetB.assetType == AssetType.ERC1155) {\r\n                    IERC1155(_lockBox.assetB.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetB.assetID, 1, \"\");\r\n                }\r\n                else if(_lockBox.assetB.assetType == AssetType.TOKEN) {\r\n                    IERC20(_lockBox.assetB.assetAddress).transfer(msg.sender, _lockBox.assetB.assetQuantity);\r\n                }\r\n                else if(_lockBox.assetB.assetType == AssetType.COIN) {\r\n                    payable(_lockBox.assetB.owner).transfer(_lockBox.assetB.assetQuantity);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function cancelLockBox(uint _id) public onlyLockboxOwner(_id) isLockBoxValid(_id) {\r\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\r\n                \r\n        require(\r\n            _lockBox.assetA.approvalStatus == ApprovalStatus.NOT_APPROVED ||\r\n            _lockBox.assetB.approvalStatus == ApprovalStatus.NOT_APPROVED ,\r\n             \"Cannot cancel the lockbox now\"\r\n        );\r\n\r\n        lockBoxInfo[_id].status = Status.FAILED;\r\n\r\n    }\r\n\r\n    function withdrawFunds() public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        require(balance > 0, \"Balance is zero\");\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    function updateBoxFee(uint _fee) public onlyOwner {\r\n        boxFee = _fee;\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}