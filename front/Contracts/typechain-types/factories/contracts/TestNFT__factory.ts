/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { TestNFT, TestNFTInterface } from "../../contracts/TestNFT";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020016615195cdd13919560ca1b815250604051806040016040528060048152602001631513919560e21b81525081600090816200006091906200011d565b5060016200006f82826200011d565b505050620001e9565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000a357607f821691505b602082108103620000c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200011857600081815260208120601f850160051c81016020861015620000f35750805b601f850160051c820191505b818110156200011457828155600101620000ff565b5050505b505050565b81516001600160401b0381111562000139576200013962000078565b62000151816200014a84546200008e565b84620000ca565b602080601f831160018114620001895760008415620001705750858301515b600019600386901b1c1916600185901b17855562000114565b600085815260208120601f198616915b82811015620001ba5788860151825594840194600190910190840162000199565b5085821015620001d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61130980620001f96000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb465146101f5578063b88d4fde14610208578063c87b56dd1461021b578063e985e9c51461022e57600080fd5b80636352211e146101b45780636a627842146101c757806370a08231146101da57806395d89b41146101ed57600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806323b872dd1461017757806342842e0e1461018a57806361bc221a1461019d57600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d610108366004610e6e565b61026a565b60405190151581526020015b60405180910390f35b61012a6102bc565b6040516101199190610edb565b61014a610145366004610eee565b61034e565b6040516001600160a01b039091168152602001610119565b610175610170366004610f23565b610375565b005b610175610185366004610f4d565b61048f565b610175610198366004610f4d565b6104c0565b6101a660065481565b604051908152602001610119565b61014a6101c2366004610eee565b6104db565b6101756101d5366004610f89565b61053b565b6101a66101e8366004610f89565b610561565b61012a6105e7565b610175610203366004610fa4565b6105f6565b610175610216366004610ff6565b610601565b61012a610229366004610eee565b610639565b61010d61023c3660046110d2565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061029b57506001600160e01b03198216635b5e139f60e01b145b806102b657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102cb90611105565b80601f01602080910402602001604051908101604052809291908181526020018280546102f790611105565b80156103445780601f1061031957610100808354040283529160200191610344565b820191906000526020600020905b81548152906001019060200180831161032757829003601f168201915b5050505050905090565b6000610359826106ad565b506000908152600460205260409020546001600160a01b031690565b6000610380826104db565b9050806001600160a01b0316836001600160a01b0316036103f25760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061040e575061040e813361023c565b6104805760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016103e9565b61048a838361070f565b505050565b610499338261077d565b6104b55760405162461bcd60e51b81526004016103e99061113f565b61048a8383836107fc565b61048a83838360405180602001604052806000815250610601565b6000818152600260205260408120546001600160a01b0316806102b65760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103e9565b600060066000815461054c9061118c565b9182905550905061055d8282610960565b5050565b60006001600160a01b0382166105cb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016103e9565b506001600160a01b031660009081526003602052604090205490565b6060600180546102cb90611105565b61055d338383610aeb565b61060b338361077d565b6106275760405162461bcd60e51b81526004016103e99061113f565b61063384848484610bb9565b50505050565b6060610644826106ad565b600061065b60408051602081019091526000815290565b9050600081511161067b57604051806020016040528060008152506106a6565b8061068584610bec565b6040516020016106969291906111b3565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b031661070c5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103e9565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610744826104db565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610789836104db565b9050806001600160a01b0316846001600160a01b031614806107d057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107f45750836001600160a01b03166107e98461034e565b6001600160a01b0316145b949350505050565b826001600160a01b031661080f826104db565b6001600160a01b0316146108355760405162461bcd60e51b81526004016103e9906111e2565b6001600160a01b0382166108975760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103e9565b826001600160a01b03166108aa826104db565b6001600160a01b0316146108d05760405162461bcd60e51b81526004016103e9906111e2565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166109b65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103e9565b6000818152600260205260409020546001600160a01b031615610a1b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103e9565b6000818152600260205260409020546001600160a01b031615610a805760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103e9565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b031603610b4c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103e9565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610bc48484846107fc565b610bd084848484610c7f565b6106335760405162461bcd60e51b81526004016103e990611227565b60606000610bf983610d80565b600101905060008167ffffffffffffffff811115610c1957610c19610fe0565b6040519080825280601f01601f191660200182016040528015610c43576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610c4d57509392505050565b60006001600160a01b0384163b15610d7557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610cc3903390899088908890600401611279565b6020604051808303816000875af1925050508015610cfe575060408051601f3d908101601f19168201909252610cfb918101906112b6565b60015b610d5b573d808015610d2c576040519150601f19603f3d011682016040523d82523d6000602084013e610d31565b606091505b508051600003610d535760405162461bcd60e51b81526004016103e990611227565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107f4565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610dbf5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610deb576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e0957662386f26fc10000830492506010015b6305f5e1008310610e21576305f5e100830492506008015b6127108310610e3557612710830492506004015b60648310610e47576064830492506002015b600a83106102b65760010192915050565b6001600160e01b03198116811461070c57600080fd5b600060208284031215610e8057600080fd5b81356106a681610e58565b60005b83811015610ea6578181015183820152602001610e8e565b50506000910152565b60008151808452610ec7816020860160208601610e8b565b601f01601f19169290920160200192915050565b6020815260006106a66020830184610eaf565b600060208284031215610f0057600080fd5b5035919050565b80356001600160a01b0381168114610f1e57600080fd5b919050565b60008060408385031215610f3657600080fd5b610f3f83610f07565b946020939093013593505050565b600080600060608486031215610f6257600080fd5b610f6b84610f07565b9250610f7960208501610f07565b9150604084013590509250925092565b600060208284031215610f9b57600080fd5b6106a682610f07565b60008060408385031215610fb757600080fd5b610fc083610f07565b915060208301358015158114610fd557600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561100c57600080fd5b61101585610f07565b935061102360208601610f07565b925060408501359150606085013567ffffffffffffffff8082111561104757600080fd5b818701915087601f83011261105b57600080fd5b81358181111561106d5761106d610fe0565b604051601f8201601f19908116603f0116810190838211818310171561109557611095610fe0565b816040528281528a60208487010111156110ae57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600080604083850312156110e557600080fd5b6110ee83610f07565b91506110fc60208401610f07565b90509250929050565b600181811c9082168061111957607f821691505b60208210810361113957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000600182016111ac57634e487b7160e01b600052601160045260246000fd5b5060010190565b600083516111c5818460208801610e8b565b8351908301906111d9818360208801610e8b565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906112ac90830184610eaf565b9695505050505050565b6000602082840312156112c857600080fd5b81516106a681610e5856fea2646970667358221220b7d04bd21aec7accb92cb8e374df0e0a03a6ceaf7db9220108865e2e4921a3e464736f6c63430008120033";

type TestNFTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestNFT__factory extends ContractFactory {
  constructor(...args: TestNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestNFT> {
    return super.deploy(overrides || {}) as Promise<TestNFT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestNFT {
    return super.attach(address) as TestNFT;
  }
  override connect(signer: Signer): TestNFT__factory {
    return super.connect(signer) as TestNFT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestNFTInterface {
    return new utils.Interface(_abi) as TestNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestNFT {
    return new Contract(address, _abi, signerOrProvider) as TestNFT;
  }
}
