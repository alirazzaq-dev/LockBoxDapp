{
  "address": "0xe4462Bbfe39cC56f7870f4876907404fe64f5CA2",
  "abi": [
    {
      "inputs": [],
      "name": "LockBox__EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__NOT_PENDING_ANYMORE",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "approveAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "cancelLockBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "claimAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LockBox.AssetType",
          "name": "_assetAtype",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_assetAaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetAQuantity",
          "type": "uint256"
        },
        {
          "internalType": "enum LockBox.AssetType",
          "name": "_assetBtype",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_assetBaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetBID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetBQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expiryTime",
          "type": "uint256"
        }
      ],
      "name": "createLockBox",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "lockAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockBoxInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "lockBoxOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        },
        {
          "internalType": "enum LockBox.Status",
          "name": "status",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "enum LockBox.AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "assetID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetQuantity",
              "type": "uint256"
            },
            {
              "internalType": "enum LockBox.LockStatus",
              "name": "lockStatus",
              "type": "uint8"
            },
            {
              "internalType": "enum LockBox.ApprovalStatus",
              "name": "approvalStatus",
              "type": "uint8"
            },
            {
              "internalType": "enum LockBox.ClaimStatus",
              "name": "claimStatus",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "claimedBy",
              "type": "address"
            }
          ],
          "internalType": "struct LockBox.Asset",
          "name": "assetA",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum LockBox.AssetType",
              "name": "assetType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "assetID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetQuantity",
              "type": "uint256"
            },
            {
              "internalType": "enum LockBox.LockStatus",
              "name": "lockStatus",
              "type": "uint8"
            },
            {
              "internalType": "enum LockBox.ApprovalStatus",
              "name": "approvalStatus",
              "type": "uint8"
            },
            {
              "internalType": "enum LockBox.ClaimStatus",
              "name": "claimStatus",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "claimedBy",
              "type": "address"
            }
          ],
          "internalType": "struct LockBox.Asset",
          "name": "assetB",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateBoxFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc022087e90fe07743c5aebeb33aa166aad5c3831b2cfdb0390709a321292ec9e",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0xe4462Bbfe39cC56f7870f4876907404fe64f5CA2",
    "transactionIndex": 0,
    "gasUsed": "3021073",
    "logsBloom": "0x
    "blockHash": "0xa6fb8aaa77e627f6942d84cd0c8e0a08e7ec4eb02c6aaff1b2881d1c102fb9d3",
    "transactionHash": "0xc022087e90fe07743c5aebeb33aa166aad5c3831b2cfdb0390709a321292ec9e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3989166,
        "transactionHash": "0xc022087e90fe07743c5aebeb33aa166aad5c3831b2cfdb0390709a321292ec9e",
        "address": "0xe4462Bbfe39cC56f7870f4876907404fe64f5CA2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fb08a7d994570a16322c1ea2d8d9936719761b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa6fb8aaa77e627f6942d84cd0c8e0a08e7ec4eb02c6aaff1b2881d1c102fb9d3"
      }
    ],
    "blockNumber": 3989166,
    "cumulativeGasUsed": "3021073",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dd23bd8b6f0a3edbeb7ad9db263e2ba9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LockBox__EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__NOT_PENDING_ANYMORE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"approveAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelLockBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"_assetAtype\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_assetAaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetAQuantity\",\"type\":\"uint256\"},{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"_assetBtype\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_assetBaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetBID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetBQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTime\",\"type\":\"uint256\"}],\"name\":\"createLockBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"lockAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockBoxInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lockBoxOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"enum LockBox.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"enum LockBox.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum LockBox.ApprovalStatus\",\"name\":\"approvalStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum LockBox.ClaimStatus\",\"name\":\"claimStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"claimedBy\",\"type\":\"address\"}],\"internalType\":\"struct LockBox.Asset\",\"name\":\"assetA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"},{\"internalType\":\"enum LockBox.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum LockBox.ApprovalStatus\",\"name\":\"approvalStatus\",\"type\":\"uint8\"},{\"internalType\":\"enum LockBox.ClaimStatus\",\"name\":\"claimStatus\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"claimedBy\",\"type\":\"address\"}],\"internalType\":\"struct LockBox.Asset\",\"name\":\"assetB\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateBoxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockBox.sol\":\"LockBox\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LockBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\n\\r\\n// import {console} from \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract LockBox is Ownable, ERC721Holder, ERC1155Holder {\\r\\n\\r\\n    error LockBox__NOT_ALLOWED();\\r\\n    error LockBox__NOT_PENDING_ANYMORE();\\r\\n    error LockBox__EXPIRED();\\r\\n    error LockBox__INSUFFICIENT_FUNDS();\\r\\n\\r\\n    uint public counter;\\r\\n    uint public boxFee = 0.1 ether;\\r\\n\\r\\n    mapping (uint => LockBoxInfo) public lockBoxInfo;\\r\\n\\r\\n    enum AssetType {NFT, TOKEN, COIN, ERC1155}\\r\\n    enum Status {PENDING, SUCCEED, FAILED}\\r\\n    enum ClaimStatus {NOT_CLAIMED, CLAIMED}\\r\\n    enum LockStatus {NOT_LOCKED, LOCKED}\\r\\n    enum ApprovalStatus {NOT_APPROVED, APPROVED}\\r\\n\\r\\n    modifier onlyLockboxUsers(uint _id) {\\r\\n        if(_msgSender() != lockBoxInfo[_id].assetA.owner && _msgSender() != lockBoxInfo[_id].assetB.owner){\\r\\n            revert LockBox__NOT_ALLOWED();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyLockboxOwner(uint _id) {\\r\\n        if(_msgSender() != lockBoxInfo[_id].lockBoxOwner){\\r\\n            revert LockBox__NOT_ALLOWED();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isLockBoxValid(uint _id){\\r\\n        if(lockBoxInfo[_id].status != Status.PENDING){\\r\\n            revert LockBox__NOT_PENDING_ANYMORE();\\r\\n        }\\r\\n        if(block.timestamp >= lockBoxInfo[_id].expiryTime){\\r\\n            revert LockBox__EXPIRED();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        AssetType assetType;\\r\\n        address owner;\\r\\n        address assetAddress;\\r\\n        uint assetID;\\r\\n        uint assetQuantity;\\r\\n        LockStatus lockStatus;\\r\\n        ApprovalStatus approvalStatus;\\r\\n        ClaimStatus claimStatus;\\r\\n        address claimedBy;\\r\\n    }\\r\\n\\r\\n    struct LockBoxInfo {\\r\\n        address lockBoxOwner;\\r\\n        uint expiryTime;\\r\\n        Status status;\\r\\n        Asset assetA;\\r\\n        Asset assetB;\\r\\n    }\\r\\n\\r\\n    function createLockBox(\\r\\n        AssetType _assetAtype, address _assetAaddress, uint _assetAID, uint _assetAQuantity,\\r\\n        AssetType _assetBtype, address _assetBaddress, uint _assetBID, uint _assetBQuantity,\\r\\n        uint _expiryTime\\r\\n        ) public payable {\\r\\n        \\r\\n        if(msg.value < boxFee){\\r\\n            revert LockBox__INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            _expiryTime > 0 && \\r\\n            _expiryTime <= 1 days, \\r\\n            \\\"Expiry time should be more than now and less than one day\\\"\\r\\n            );\\r\\n\\r\\n        counter++;\\r\\n\\r\\n        Asset memory _assetA = Asset (\\r\\n            _assetAtype, \\r\\n            msg.sender,\\r\\n            _assetAaddress,\\r\\n            _assetAID,\\r\\n            _assetAQuantity,\\r\\n            LockStatus.NOT_LOCKED,\\r\\n            ApprovalStatus.NOT_APPROVED,\\r\\n            ClaimStatus.NOT_CLAIMED,\\r\\n            address(0)\\r\\n        );\\r\\n\\r\\n        Asset memory _assetB = Asset (\\r\\n            _assetBtype, \\r\\n            address(0),\\r\\n            _assetBaddress,\\r\\n            _assetBID,\\r\\n            _assetBQuantity,\\r\\n            LockStatus.NOT_LOCKED,\\r\\n            ApprovalStatus.NOT_APPROVED,\\r\\n            ClaimStatus.NOT_CLAIMED,\\r\\n            address(0)\\r\\n        );\\r\\n\\r\\n        LockBoxInfo memory _lockBox =  LockBoxInfo (\\r\\n            msg.sender,\\r\\n            block.timestamp + _expiryTime,\\r\\n            Status.PENDING,\\r\\n            _assetA,\\r\\n            _assetB\\r\\n        );\\r\\n\\r\\n\\r\\n        lockBoxInfo[counter] = _lockBox;\\r\\n    \\r\\n    }\\r\\n\\r\\n    function lockAsset(uint _id) public payable isLockBoxValid(_id){\\r\\n\\r\\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\\r\\n        \\r\\n        if(msg.sender == _lockBox.assetA.owner){\\r\\n            require(_lockBox.assetA.lockStatus == LockStatus.NOT_LOCKED, \\\"Asset is already locked\\\" );\\r\\n\\r\\n                    // Submit Asset A\\r\\n            if(_lockBox.assetA.assetType == AssetType.NFT) {\\r\\n                IERC721(_lockBox.assetA.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetA.assetID);\\r\\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\\r\\n            }\\r\\n            else if(_lockBox.assetA.assetType == AssetType.ERC1155) {\\r\\n                IERC1155(_lockBox.assetA.assetAddress).safeTransferFrom(msg.sender, address(this), _lockBox.assetA.assetID, 1, \\\"\\\");\\r\\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\\r\\n            }\\r\\n            else if(_lockBox.assetA.assetType == AssetType.TOKEN) {\\r\\n                IERC20(_lockBox.assetA.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetA.assetQuantity);\\r\\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\\r\\n            }\\r\\n            else if(_lockBox.assetA.assetType == AssetType.COIN) {\\r\\n                require(msg.value >= _lockBox.assetA.assetQuantity, \\\"Insufficient locking funds\\\" );\\r\\n                lockBoxInfo[_id].assetA.lockStatus = LockStatus.LOCKED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        else {\\r\\n            require(_lockBox.assetB.lockStatus == LockStatus.NOT_LOCKED, \\\"Asset is already locked\\\" );\\r\\n\\r\\n            lockBoxInfo[_id].assetB.owner = msg.sender;\\r\\n\\r\\n\\r\\n            if(_lockBox.assetB.assetType == AssetType.NFT) {\\r\\n                IERC721(_lockBox.assetB.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetB.assetID);\\r\\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\\r\\n            }\\r\\n            else if(_lockBox.assetB.assetType == AssetType.ERC1155) {\\r\\n                IERC1155(_lockBox.assetB.assetAddress).safeTransferFrom(msg.sender, address(this), _lockBox.assetB.assetID, 1, \\\"\\\");\\r\\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\\r\\n            }\\r\\n            else if(_lockBox.assetB.assetType == AssetType.TOKEN) {\\r\\n                IERC20(_lockBox.assetB.assetAddress).transferFrom(msg.sender, address(this), _lockBox.assetB.assetQuantity);\\r\\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\\r\\n\\r\\n            }\\r\\n            else if(_lockBox.assetB.assetType == AssetType.COIN) {\\r\\n                require(msg.value >= _lockBox.assetB.assetQuantity, \\\"Insufficient locking funds\\\" );\\r\\n                lockBoxInfo[_id].assetB.lockStatus = LockStatus.LOCKED;\\r\\n            }\\r\\n\\r\\n        }\\r\\n            \\r\\n\\r\\n    }\\r\\n\\r\\n    function approveAsset(uint _id) public onlyLockboxUsers(_id) isLockBoxValid(_id){\\r\\n\\r\\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\\r\\n        \\r\\n        if(msg.sender == _lockBox.assetA.owner){\\r\\n            \\r\\n            require(_lockBox.assetA.lockStatus == LockStatus.LOCKED, \\\"Asset id not locked\\\" );\\r\\n            require(_lockBox.assetA.approvalStatus == ApprovalStatus.NOT_APPROVED, \\\"Asset is already approved\\\");\\r\\n            \\r\\n            lockBoxInfo[_id].assetA.approvalStatus = ApprovalStatus.APPROVED;\\r\\n\\r\\n            if(_lockBox.assetB.approvalStatus == ApprovalStatus.APPROVED){\\r\\n                lockBoxInfo[_id].status = Status.SUCCEED;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        else if(msg.sender == _lockBox.assetB.owner){\\r\\n\\r\\n            require(_lockBox.assetB.lockStatus == LockStatus.LOCKED, \\\"Asset id not locked\\\" );\\r\\n            require(_lockBox.assetB.approvalStatus == ApprovalStatus.NOT_APPROVED, \\\"Asset is already approved\\\");\\r\\n            \\r\\n            lockBoxInfo[_id].assetB.approvalStatus = ApprovalStatus.APPROVED;\\r\\n\\r\\n            if(_lockBox.assetA.approvalStatus == ApprovalStatus.APPROVED){\\r\\n                lockBoxInfo[_id].status = Status.SUCCEED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function claimAsset(uint _id) public  onlyLockboxUsers(_id) {\\r\\n\\r\\n        if(block.timestamp >= lockBoxInfo[_id].expiryTime){\\r\\n            lockBoxInfo[_id].status = Status.FAILED;\\r\\n        }\\r\\n\\r\\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\\r\\n\\r\\n        require( _lockBox.status != Status.PENDING, \\\"Nothing to claim\\\" );\\r\\n\\r\\n        if(msg.sender == _lockBox.assetA.owner) {\\r\\n\\r\\n            if(_lockBox.status == Status.SUCCEED){\\r\\n                // require( _lockBox.assetB.claimStatus == ClaimStatus.NOT_CLAIMED, \\\"Asset B is already claimed\\\" );\\r\\n                // require( _lockBox.assetB.lockStatus == LockStatus.LOCKED, \\\"Asset B is not locked\\\" );\\r\\n                // require( _lockBox.assetB.approvalStatus == ApprovalStatus.APPROVED, \\\"Asset B is not approved\\\" );\\r\\n\\r\\n                lockBoxInfo[_id].assetB.claimedBy = msg.sender;\\r\\n                lockBoxInfo[_id].assetB.claimStatus = ClaimStatus.CLAIMED;\\r\\n\\r\\n                if(_lockBox.assetB.assetType == AssetType.NFT) {\\r\\n                    IERC721(_lockBox.assetB.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetB.assetID);\\r\\n                }\\r\\n                else if(_lockBox.assetB.assetType == AssetType.ERC1155) {\\r\\n                    IERC1155(_lockBox.assetB.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetB.assetID, 1, \\\"\\\");\\r\\n                }\\r\\n                else if(_lockBox.assetB.assetType == AssetType.TOKEN) {\\r\\n                    IERC20(_lockBox.assetB.assetAddress).transfer(msg.sender, _lockBox.assetB.assetQuantity);\\r\\n                }\\r\\n                else if(_lockBox.assetB.assetType == AssetType.COIN) {\\r\\n                    payable(_lockBox.assetA.owner).transfer(_lockBox.assetB.assetQuantity);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            else if(_lockBox.status == Status.FAILED){\\r\\n                \\r\\n                require( _lockBox.assetA.lockStatus == LockStatus.LOCKED, \\\"Asset A is not locked\\\" );\\r\\n                require( _lockBox.assetA.claimStatus == ClaimStatus.NOT_CLAIMED, \\\"Asset A is already claimed\\\" );\\r\\n                // require( _lockBox.assetA.approvalStatus == ApprovalStatus.APPROVED, \\\"Asset A is not approved\\\" );\\r\\n    \\r\\n                lockBoxInfo[_id].assetA.claimedBy = msg.sender;\\r\\n                lockBoxInfo[_id].assetA.claimStatus = ClaimStatus.CLAIMED;\\r\\n\\r\\n                if(_lockBox.assetA.assetType == AssetType.NFT) {\\r\\n                    IERC721(_lockBox.assetA.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetA.assetID);\\r\\n                }\\r\\n                else if(_lockBox.assetA.assetType == AssetType.ERC1155) {\\r\\n                    IERC1155(_lockBox.assetA.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetA.assetID, 1, \\\"\\\");\\r\\n                }\\r\\n                else if(_lockBox.assetA.assetType == AssetType.TOKEN) {\\r\\n                    IERC20(_lockBox.assetA.assetAddress).transfer(msg.sender, _lockBox.assetA.assetQuantity);\\r\\n                }\\r\\n                else if(_lockBox.assetA.assetType == AssetType.COIN) {\\r\\n                    payable(_lockBox.assetA.owner).transfer(_lockBox.assetA.assetQuantity);\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            else if(_lockBox.status == Status.PENDING) {\\r\\n                require( _lockBox.assetA.lockStatus == LockStatus.LOCKED, \\\"Asset A is not locked\\\" );\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        else if(msg.sender == _lockBox.assetB.owner) {\\r\\n            \\r\\n            if(_lockBox.status == Status.SUCCEED) {\\r\\n                \\r\\n                // require( _lockBox.assetA.claimStatus == ClaimStatus.NOT_CLAIMED, \\\"Asset A is already claimed\\\" );\\r\\n                // require( _lockBox.assetA.lockStatus == LockStatus.LOCKED, \\\"Asset A is not locked\\\" );\\r\\n                // require( _lockBox.assetA.approvalStatus == ApprovalStatus.APPROVED, \\\"Asset A is not approved\\\" );\\r\\n\\r\\n                lockBoxInfo[_id].assetA.claimedBy = msg.sender;\\r\\n                lockBoxInfo[_id].assetA.claimStatus = ClaimStatus.CLAIMED;\\r\\n\\r\\n                if(_lockBox.assetA.assetType == AssetType.NFT) {\\r\\n                    IERC721(_lockBox.assetA.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetA.assetID);\\r\\n                }\\r\\n                else if(_lockBox.assetA.assetType == AssetType.ERC1155) {\\r\\n                    IERC1155(_lockBox.assetA.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetA.assetID, 1, \\\"\\\");\\r\\n                }\\r\\n                else if(_lockBox.assetA.assetType == AssetType.TOKEN) {\\r\\n                    IERC20(_lockBox.assetA.assetAddress).transfer(msg.sender, _lockBox.assetA.assetQuantity);\\r\\n                }\\r\\n                else if(_lockBox.assetA.assetType == AssetType.COIN) {\\r\\n                    payable(_lockBox.assetB.owner).transfer(_lockBox.assetA.assetQuantity);\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n            else if(_lockBox.status == Status.FAILED) {\\r\\n\\r\\n                require( _lockBox.assetB.claimStatus == ClaimStatus.NOT_CLAIMED, \\\"Asset B is already claimed\\\" );\\r\\n                require( _lockBox.assetB.lockStatus == LockStatus.LOCKED, \\\"Asset B is not locked\\\" );\\r\\n\\r\\n                lockBoxInfo[_id].assetB.claimStatus = ClaimStatus.CLAIMED;\\r\\n                lockBoxInfo[_id].assetB.claimedBy = msg.sender;\\r\\n\\r\\n                if(_lockBox.assetB.assetType == AssetType.NFT) {\\r\\n                    IERC721(_lockBox.assetB.assetAddress).transferFrom(address(this), msg.sender, _lockBox.assetB.assetID);\\r\\n                }\\r\\n                else if(_lockBox.assetB.assetType == AssetType.ERC1155) {\\r\\n                    IERC1155(_lockBox.assetB.assetAddress).safeTransferFrom(address(this), msg.sender, _lockBox.assetB.assetID, 1, \\\"\\\");\\r\\n                }\\r\\n                else if(_lockBox.assetB.assetType == AssetType.TOKEN) {\\r\\n                    IERC20(_lockBox.assetB.assetAddress).transfer(msg.sender, _lockBox.assetB.assetQuantity);\\r\\n                }\\r\\n                else if(_lockBox.assetB.assetType == AssetType.COIN) {\\r\\n                    payable(_lockBox.assetB.owner).transfer(_lockBox.assetB.assetQuantity);\\r\\n                }\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    function cancelLockBox(uint _id) public onlyLockboxOwner(_id) isLockBoxValid(_id) {\\r\\n        LockBoxInfo memory _lockBox = lockBoxInfo[_id];\\r\\n                \\r\\n        require(\\r\\n            _lockBox.assetA.approvalStatus == ApprovalStatus.NOT_APPROVED ||\\r\\n            _lockBox.assetB.approvalStatus == ApprovalStatus.NOT_APPROVED ,\\r\\n             \\\"Cannot cancel the lockbox now\\\"\\r\\n        );\\r\\n\\r\\n        lockBoxInfo[_id].status = Status.FAILED;\\r\\n\\r\\n    }\\r\\n\\r\\n    function withdrawFunds() public onlyOwner {\\r\\n        uint balance = address(this).balance;\\r\\n        require(balance > 0, \\\"Balance is zero\\\");\\r\\n        payable(owner()).transfer(balance);\\r\\n    }\\r\\n\\r\\n    function updateBoxFee(uint _fee) public onlyOwner {\\r\\n        boxFee = _fee;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x5af80ac51955ec529a296c7df8e4b7debf500da82bda84c0c032cb16556e1641\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405267016345785d8a00006002553480156200001d57600080fd5b5062000029336200002f565b6200007f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6134d2806200008f6000396000f3fe6080604052600436106100fe5760003560e01c80638a88cbbe11610095578063d3f29c3311610064578063d3f29c331461029c578063e18ec218146102bc578063f1c5797d146102dc578063f23a6e611461030d578063f2fde38b1461033957600080fd5b80638a88cbbe146102155780638da5cb5b14610228578063bc197c8114610250578063d3c2a5921461027c57600080fd5b806324600fc3116100d157806324600fc3146101b557806361bc221a146101ca578063715018a6146101e0578063864d7e14146101f557600080fd5b806301ffc9a7146101035780630a1053fb14610138578063150b7a021461015c5780631629614e146101a0575b600080fd5b34801561010f57600080fd5b5061012361011e366004612ee9565b610359565b60405190151581526020015b60405180910390f35b34801561014457600080fd5b5061014e60025481565b60405190815260200161012f565b34801561016857600080fd5b50610187610177366004612fed565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161012f565b6101b36101ae366004613055565b610390565b005b3480156101c157600080fd5b506101b3610cd6565b3480156101d657600080fd5b5061014e60015481565b3480156101ec57600080fd5b506101b3610d5b565b34801561020157600080fd5b506101b3610210366004613055565b610d6f565b6101b361022336600461307d565b6113ce565b34801561023457600080fd5b506000546040516001600160a01b03909116815260200161012f565b34801561025c57600080fd5b5061018761026b366004613182565b63bc197c8160e01b95945050505050565b34801561028857600080fd5b506101b3610297366004613055565b6118a0565b3480156102a857600080fd5b506101b36102b7366004613055565b6126cf565b3480156102c857600080fd5b506101b36102d7366004613055565b612b1a565b3480156102e857600080fd5b506102fc6102f7366004613055565b612b27565b60405161012f959493929190613309565b34801561031957600080fd5b5061018761032836600461335c565b63f23a6e6160e01b95945050505050565b34801561034557600080fd5b506101b36103543660046133c1565b612dc6565b60006001600160e01b03198216630271189760e51b148061038a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b8060008082815260036020526040902060029081015460ff16908111156103b9576103b961322c565b146103d7576040516339b5486f60e01b815260040160405180910390fd5b60008181526003602052604090206001015442106104085760405163bdef925160e01b815260040160405180910390fd5b6000828152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff16908111156104585761045861322c565b60028111156104695761046961322c565b8152604080516101208101909152600383810180546020909401939091839160ff169081111561049b5761049b61322c565b60038111156104ac576104ac61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156105055761050561322c565b60018111156105165761051661322c565b81526020016004820160019054906101000a900460ff16600181111561053e5761053e61322c565b600181111561054f5761054f61322c565b81526020016004820160029054906101000a900460ff1660018111156105775761057761322c565b60018111156105885761058861322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff1660038111156105da576105da61322c565b60038111156105eb576105eb61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156106445761064461322c565b60018111156106555761065561322c565b81526020016004820160019054906101000a900460ff16600181111561067d5761067d61322c565b600181111561068e5761068e61322c565b81526020016004820160029054906101000a900460ff1660018111156106b6576106b661322c565b60018111156106c7576106c761322c565b8152600491909101546001600160a01b03630100000090910481166020928301529190925260608401519091015192935091909116330390506109e4576000816060015160a0015160018111156107205761072061322c565b1461076c5760405162461bcd60e51b8152602060048201526017602482015276105cdcd95d081a5cc8185b1c9958591e481b1bd8dad959604a1b60448201526064015b60405180910390fd5b600060608201515160038111156107855761078561322c565b03610823578060600151604001516001600160a01b03166323b872dd33308460600151606001516040518463ffffffff1660e01b81526004016107ca939291906133dc565b600060405180830381600087803b1580156107e457600080fd5b505af11580156107f8573d6000803e3d6000fd5b505050600084815260036020526040902060070180546001925060ff191682805b0217905550505050565b6003606082015151600381111561083c5761083c61322c565b03610884578060600151604001516001600160a01b031663f242432a333084606001516060015160016040518563ffffffff1660e01b81526004016107ca9493929190613400565b6001606082015151600381111561089d5761089d61322c565b0361094757606081015160408082015160809092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd916108e191339130916004016133dc565b6020604051808303816000875af1158015610900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109249190613438565b50600083815260036020526040902060070180546001919060ff19168280610819565b600260608201515160038111156109605761096061322c565b036109df578060600151608001513410156109bd5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206c6f636b696e672066756e64730000000000006044820152606401610763565b600083815260036020526040902060070180546001919060ff19168280610819565b505050565b6000816080015160a001516001811115610a0057610a0061322c565b14610a475760405162461bcd60e51b8152602060048201526017602482015276105cdcd95d081a5cc8185b1c9958591e481b1bd8dad959604a1b6044820152606401610763565b60008381526003602052604081206008018054610100600160a81b03191633610100021790556080820151516003811115610a8457610a8461322c565b03610b1b57608081015160408082015160609092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91610ac891339130916004016133dc565b600060405180830381600087803b158015610ae257600080fd5b505af1158015610af6573d6000803e3d6000fd5b5050506000848152600360205260409020600c0180546001925060ff19168280610819565b60036080820151516003811115610b3457610b3461322c565b03610b7b5760808101516040808201516060909201519051637921219560e11b81526001600160a01b039092169163f242432a91610ac89133913091600190600401613400565b60016080820151516003811115610b9457610b9461322c565b03610c3f578060800151604001516001600160a01b03166323b872dd33308460800151608001516040518463ffffffff1660e01b8152600401610bd9939291906133dc565b6020604051808303816000875af1158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190613438565b506000838152600360205260409020600c0180546001919060ff19168280610819565b60026080820151516003811115610c5857610c5861322c565b036109df57806080015160800151341015610cb55760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206c6f636b696e672066756e64730000000000006044820152606401610763565b6000838152600360205260409020600c01805460ff19166001179055505050565b610cde612e3f565b4780610d1e5760405162461bcd60e51b815260206004820152600f60248201526e42616c616e6365206973207a65726f60881b6044820152606401610763565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610d57573d6000803e3d6000fd5b5050565b610d63612e3f565b610d6d6000612e99565b565b60008181526003602081905260409091200154819061010090046001600160a01b0316336001600160a01b031614158015610dd2575060008181526003602052604090206008015461010090046001600160a01b0316336001600160a01b031614155b15610df057604051631e6b56c760e21b815260040160405180910390fd5b8160008082815260036020526040902060029081015460ff1690811115610e1957610e1961322c565b14610e37576040516339b5486f60e01b815260040160405180910390fd5b6000818152600360205260409020600101544210610e685760405163bdef925160e01b815260040160405180910390fd5b6000838152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff1690811115610eb857610eb861322c565b6002811115610ec957610ec961322c565b8152604080516101208101909152600383810180546020909401939091839160ff1690811115610efb57610efb61322c565b6003811115610f0c57610f0c61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115610f6557610f6561322c565b6001811115610f7657610f7661322c565b81526020016004820160019054906101000a900460ff166001811115610f9e57610f9e61322c565b6001811115610faf57610faf61322c565b81526020016004820160029054906101000a900460ff166001811115610fd757610fd761322c565b6001811115610fe857610fe861322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff16600381111561103a5761103a61322c565b600381111561104b5761104b61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156110a4576110a461322c565b60018111156110b5576110b561322c565b81526020016004820160019054906101000a900460ff1660018111156110dd576110dd61322c565b60018111156110ee576110ee61322c565b81526020016004820160029054906101000a900460ff1660018111156111165761111661322c565b60018111156111275761112761322c565b8152600491909101546001600160a01b0363010000009091048116602092830152919092526060840151909101519293509190911633039050611289576001816060015160a0015160018111156111805761118061322c565b146111c35760405162461bcd60e51b8152602060048201526013602482015272105cdcd95d081a59081b9bdd081b1bd8dad959606a1b6044820152606401610763565b6000816060015160c0015160018111156111df576111df61322c565b146112285760405162461bcd60e51b8152602060048201526019602482015278105cdcd95d081a5cc8185b1c9958591e48185c1c1c9bdd9959603a1b6044820152606401610763565b6000848152600360205260409020600701805461ff001916610100179055608081015160c00151600190818111156112625761126261322c565b03611284576000848152600360205260409020600201805460ff191660011790555b6113c8565b6080810151602001516001600160a01b031633036113c8576001816080015160a0015160018111156112bd576112bd61322c565b146113005760405162461bcd60e51b8152602060048201526013602482015272105cdcd95d081a59081b9bdd081b1bd8dad959606a1b6044820152606401610763565b6000816080015160c00151600181111561131c5761131c61322c565b146113655760405162461bcd60e51b8152602060048201526019602482015278105cdcd95d081a5cc8185b1c9958591e48185c1c1c9bdd9959603a1b6044820152606401610763565b6000848152600360205260409020600c01805461ff001916610100179055606081015160c001516001908181111561139f5761139f61322c565b036113c857600084815260036020526040902060020180546001919060ff191682805b02179055505b50505050565b6002543410156113f15760405163154b71ff60e21b815260040160405180910390fd5b6000811180156114045750620151808111155b6114765760405162461bcd60e51b815260206004820152603960248201527f4578706972792074696d652073686f756c64206265206d6f7265207468616e2060448201527f6e6f7720616e64206c657373207468616e206f6e6520646179000000000000006064820152608401610763565b6001805490600061148683613470565b919050555060006040518061012001604052808b60038111156114ab576114ab61322c565b81523360208201526001600160a01b038b166040820152606081018a90526080810189905260a00160008152602001600081526020016000815260200160006001600160a01b0316815250905060006040518061012001604052808860038111156115185761151861322c565b815260200160006001600160a01b03168152602001876001600160a01b031681526020018681526020018581526020016000600181111561155b5761155b61322c565b81526020016000815260200160008152600060209182018190526040805160a08101909152338152929350919081016115948642613489565b8152602001600081526020808201869052604091820185905260018054600090815260038352839020845181546001600160a01b0319166001600160a01b0390911617815591840151828201559183015160028083018054959650869593949293909260ff1990911691849081111561160f5761160f61322c565b02179055506060820151805160038084018054909291839160ff19169060019084908111156116405761164061322c565b021790555060208201518154610100600160a81b0319166101006001600160a01b03928316021782556040830151600180840180546001600160a01b0319169290931691909117909155606083015160028301556080830151600383015560a08301516004830180549192909160ff19169083818111156116c3576116c361322c565b021790555060c082015160048201805461ff0019166101008360018111156116ed576116ed61322c565b021790555060e082015160048201805462ff00001916620100008360018111156117195761171961322c565b02179055506101009190910151600490910180546001600160a01b039092166301000000026301000000600160b81b031990921691909117905560808201518051600883018054909190829060ff1916600183600381111561177d5761177d61322c565b021790555060208201518154610100600160a81b0319166101006001600160a01b03928316021782556040830151600180840180546001600160a01b0319169290931691909117909155606083015160028301556080830151600383015560a08301516004830180549192909160ff19169083818111156118005761180061322c565b021790555060c082015160048201805461ff00191661010083600181111561182a5761182a61322c565b021790555060e082015160048201805462ff00001916620100008360018111156118565761185661322c565b02179055506101009190910151600490910180546001600160a01b039092166301000000026301000000600160b81b03199092169190911790555050505050505050505050505050565b60008181526003602081905260409091200154819061010090046001600160a01b0316336001600160a01b031614158015611903575060008181526003602052604090206008015461010090046001600160a01b0316336001600160a01b031614155b1561192157604051631e6b56c760e21b815260040160405180910390fd5b60008281526003602052604090206001015442106119585760008281526003602052604090206002908101805460ff191690911790555b6000828152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff16908111156119a8576119a861322c565b60028111156119b9576119b961322c565b8152604080516101208101909152600383810180546020909401939091839160ff16908111156119eb576119eb61322c565b60038111156119fc576119fc61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115611a5557611a5561322c565b6001811115611a6657611a6661322c565b81526020016004820160019054906101000a900460ff166001811115611a8e57611a8e61322c565b6001811115611a9f57611a9f61322c565b81526020016004820160029054906101000a900460ff166001811115611ac757611ac761322c565b6001811115611ad857611ad861322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff166003811115611b2a57611b2a61322c565b6003811115611b3b57611b3b61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115611b9457611b9461322c565b6001811115611ba557611ba561322c565b81526020016004820160019054906101000a900460ff166001811115611bcd57611bcd61322c565b6001811115611bde57611bde61322c565b81526020016004820160029054906101000a900460ff166001811115611c0657611c0661322c565b6001811115611c1757611c1761322c565b815260049190910154630100000090046001600160a01b03166020909101529052509050600081604001516002811115611c5357611c5361322c565b03611c935760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610763565b6060810151602001516001600160a01b0316330361222e57600181604001516002811115611cc357611cc361322c565b03611ef65760008381526003602081905260408220600c01805462010000600160b81b0319163363010000000262ff00001916176201000017905560808301515190811115611d1457611d1461322c565b03611d8f57608081015160408082015160609092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91611d5891309133916004016133dc565b600060405180830381600087803b158015611d7257600080fd5b505af1158015611d86573d6000803e3d6000fd5b50505050505050565b60036080820151516003811115611da857611da861322c565b03611def5760808101516040808201516060909201519051637921219560e11b81526001600160a01b039092169163f242432a91611d589130913391600190600401613400565b60016080820151516003811115611e0857611e0861322c565b03611e8f576080808201516040808201519190920151915163a9059cbb60e01b815233600482015260248101929092526001600160a01b03169063a9059cbb906044015b6020604051808303816000875af1158015611e6b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190613438565b60026080820151516003811115611ea857611ea861322c565b036109df578060600151602001516001600160a01b03166108fc8260800151608001519081150290604051600060405180830381858888f193505050501580156113c8573d6000803e3d6000fd5b600281604001516002811115611f0e57611f0e61322c565b036121b0576001816060015160a001516001811115611f2f57611f2f61322c565b14611f745760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d0810481a5cc81b9bdd081b1bd8dad959605a1b6044820152606401610763565b6000816060015160e001516001811115611f9057611f9061322c565b14611fdd5760405162461bcd60e51b815260206004820152601a60248201527f4173736574204120697320616c726561647920636c61696d65640000000000006044820152606401610763565b60008381526003602081905260408220600701805462010000600160b81b0319163363010000000262ff000019161762010000179055606083015151908111156120295761202961322c565b0361206e578060600151604001516001600160a01b03166323b872dd30338460600151606001516040518463ffffffff1660e01b8152600401611d58939291906133dc565b600360608201515160038111156120875761208761322c565b036120cf578060600151604001516001600160a01b031663f242432a303384606001516060015160016040518563ffffffff1660e01b8152600401611d589493929190613400565b600160608201515160038111156120e8576120e861322c565b0361214c576060810151604080820151608090920151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611e6b573d6000803e3d6000fd5b600260608201515160038111156121655761216561322c565b036109df57606081015160208101516080909101516040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156113c8573d6000803e3d6000fd5b6000816040015160028111156121c8576121c861322c565b036109df576001816060015160a0015160018111156121e9576121e961322c565b146109df5760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d0810481a5cc81b9bdd081b1bd8dad959605a1b6044820152606401610763565b6080810151602001516001600160a01b031633036109df5760018160400151600281111561225e5761225e61322c565b0361241f5760008381526003602081905260408220600701805462010000600160b81b0319163363010000000262ff000019161762010000179055606083015151908111156122af576122af61322c565b036122f4578060600151604001516001600160a01b03166323b872dd30338460600151606001516040518463ffffffff1660e01b8152600401611d58939291906133dc565b6003606082015151600381111561230d5761230d61322c565b03612355578060600151604001516001600160a01b031663f242432a303384606001516060015160016040518563ffffffff1660e01b8152600401611d589493929190613400565b6001606082015151600381111561236e5761236e61322c565b036123b8576060810151604080820151608090920151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb90604401611e4c565b600260608201515160038111156123d1576123d161322c565b036109df578060800151602001516001600160a01b03166108fc8260600151608001519081150290604051600060405180830381858888f193505050501580156113c8573d6000803e3d6000fd5b6002816040015160028111156124375761243761322c565b036109df576000816080015160e0015160018111156124585761245861322c565b146124a55760405162461bcd60e51b815260206004820152601a60248201527f4173736574204220697320616c726561647920636c61696d65640000000000006044820152606401610763565b6001816080015160a0015160018111156124c1576124c161322c565b146125065760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d0810881a5cc81b9bdd081b1bd8dad959605a1b6044820152606401610763565b60008381526003602081905260408220600c0180546301000000330262010000600160b81b031990911617620100001790556080830151519081111561254e5761254e61322c565b0361259257608081015160408082015160609092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91611d5891309133916004016133dc565b600360808201515160038111156125ab576125ab61322c565b036125f25760808101516040808201516060909201519051637921219560e11b81526001600160a01b039092169163f242432a91611d589130913391600190600401613400565b6001608082015151600381111561260b5761260b61322c565b0361266d576080808201516040808201519190920151915163a9059cbb60e01b815233600482015260248101929092526001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611e6b573d6000803e3d6000fd5b600260808201515160038111156126865761268661322c565b036109df5760808082015160208101519101516040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156113c8573d6000803e3d6000fd5b60008181526003602052604090205481906001600160a01b0316336001600160a01b03161461271157604051631e6b56c760e21b815260040160405180910390fd5b8160008082815260036020526040902060029081015460ff169081111561273a5761273a61322c565b14612758576040516339b5486f60e01b815260040160405180910390fd5b60008181526003602052604090206001015442106127895760405163bdef925160e01b815260040160405180910390fd5b6000838152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff16908111156127d9576127d961322c565b60028111156127ea576127ea61322c565b8152604080516101208101909152600383810180546020909401939091839160ff169081111561281c5761281c61322c565b600381111561282d5761282d61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156128865761288661322c565b60018111156128975761289761322c565b81526020016004820160019054906101000a900460ff1660018111156128bf576128bf61322c565b60018111156128d0576128d061322c565b81526020016004820160029054906101000a900460ff1660018111156128f8576128f861322c565b60018111156129095761290961322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff16600381111561295b5761295b61322c565b600381111561296c5761296c61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156129c5576129c561322c565b60018111156129d6576129d661322c565b81526020016004820160019054906101000a900460ff1660018111156129fe576129fe61322c565b6001811115612a0f57612a0f61322c565b81526020016004820160029054906101000a900460ff166001811115612a3757612a3761322c565b6001811115612a4857612a4861322c565b815260049190910154630100000090046001600160a01b031660209091015290525090506000816060015160c001516001811115612a8857612a8861322c565b1480612aad57506000816080015160c001516001811115612aab57612aab61322c565b145b612af95760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f742063616e63656c20746865206c6f636b626f78206e6f770000006044820152606401610763565b60008481526003602052604090206002908101805460ff19166001836113c2565b612b22612e3f565b600255565b6003602081905260009182526040918290208054600182015460028301548551610120810190965283850180546001600160a01b0390941696929560ff9283169594919284921690811115612b7e57612b7e61322c565b6003811115612b8f57612b8f61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115612be857612be861322c565b6001811115612bf957612bf961322c565b81526020016004820160019054906101000a900460ff166001811115612c2157612c2161322c565b6001811115612c3257612c3261322c565b81526020016004820160029054906101000a900460ff166001811115612c5a57612c5a61322c565b6001811115612c6b57612c6b61322c565b815260049190910154630100000090046001600160a01b0316602090910152604080516101208101909152600883018054929392829060ff166003811115612cb557612cb561322c565b6003811115612cc657612cc661322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115612d1f57612d1f61322c565b6001811115612d3057612d3061322c565b81526020016004820160019054906101000a900460ff166001811115612d5857612d5861322c565b6001811115612d6957612d6961322c565b81526020016004820160029054906101000a900460ff166001811115612d9157612d9161322c565b6001811115612da257612da261322c565b815260049190910154630100000090046001600160a01b0316602090910152905085565b612dce612e3f565b6001600160a01b038116612e335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610763565b612e3c81612e99565b50565b6000546001600160a01b03163314610d6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215612efb57600080fd5b81356001600160e01b031981168114612f1357600080fd5b9392505050565b80356001600160a01b0381168114612f3157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f7557612f75612f36565b604052919050565b600082601f830112612f8e57600080fd5b813567ffffffffffffffff811115612fa857612fa8612f36565b612fbb601f8201601f1916602001612f4c565b818152846020838601011115612fd057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561300357600080fd5b61300c85612f1a565b935061301a60208601612f1a565b925060408501359150606085013567ffffffffffffffff81111561303d57600080fd5b61304987828801612f7d565b91505092959194509250565b60006020828403121561306757600080fd5b5035919050565b803560048110612f3157600080fd5b60008060008060008060008060006101208a8c03121561309c57600080fd5b6130a58a61306e565b98506130b360208b01612f1a565b975060408a0135965060608a013595506130cf60808b0161306e565b94506130dd60a08b01612f1a565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b600082601f83011261311357600080fd5b8135602067ffffffffffffffff82111561312f5761312f612f36565b8160051b61313e828201612f4c565b928352848101820192828101908785111561315857600080fd5b83870192505b848310156131775782358252918301919083019061315e565b979650505050505050565b600080600080600060a0868803121561319a57600080fd5b6131a386612f1a565b94506131b160208701612f1a565b9350604086013567ffffffffffffffff808211156131ce57600080fd5b6131da89838a01613102565b945060608801359150808211156131f057600080fd5b6131fc89838a01613102565b9350608088013591508082111561321257600080fd5b5061321f88828901612f7d565b9150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600281106132525761325261322c565b9052565b8051600481106132685761326861322c565b80835250602081015161328660208401826001600160a01b03169052565b5060408101516132a160408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a08101516132c860a0840182613242565b5060c08101516132db60c0840182613242565b5060e08101516132ee60e0840182613242565b50610100818101516001600160a01b038116848301526113c8565b6001600160a01b0386168152602081018590526102a08101600385106133315761333161322c565b8460408301526133446060830185613256565b613352610180830184613256565b9695505050505050565b600080600080600060a0868803121561337457600080fd5b61337d86612f1a565b945061338b60208701612f1a565b93506040860135925060608601359150608086013567ffffffffffffffff8111156133b557600080fd5b61321f88828901612f7d565b6000602082840312156133d357600080fd5b612f1382612f1a565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b60006020828403121561344a57600080fd5b81518015158114612f1357600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134825761348261345a565b5060010190565b8082018082111561038a5761038a61345a56fea2646970667358221220a549769a63c23be55d8d5bec1685e68e3d376ed1ff7f146fb0ba3cc20f4854c864736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80638a88cbbe11610095578063d3f29c3311610064578063d3f29c331461029c578063e18ec218146102bc578063f1c5797d146102dc578063f23a6e611461030d578063f2fde38b1461033957600080fd5b80638a88cbbe146102155780638da5cb5b14610228578063bc197c8114610250578063d3c2a5921461027c57600080fd5b806324600fc3116100d157806324600fc3146101b557806361bc221a146101ca578063715018a6146101e0578063864d7e14146101f557600080fd5b806301ffc9a7146101035780630a1053fb14610138578063150b7a021461015c5780631629614e146101a0575b600080fd5b34801561010f57600080fd5b5061012361011e366004612ee9565b610359565b60405190151581526020015b60405180910390f35b34801561014457600080fd5b5061014e60025481565b60405190815260200161012f565b34801561016857600080fd5b50610187610177366004612fed565b630a85bd0160e11b949350505050565b6040516001600160e01b0319909116815260200161012f565b6101b36101ae366004613055565b610390565b005b3480156101c157600080fd5b506101b3610cd6565b3480156101d657600080fd5b5061014e60015481565b3480156101ec57600080fd5b506101b3610d5b565b34801561020157600080fd5b506101b3610210366004613055565b610d6f565b6101b361022336600461307d565b6113ce565b34801561023457600080fd5b506000546040516001600160a01b03909116815260200161012f565b34801561025c57600080fd5b5061018761026b366004613182565b63bc197c8160e01b95945050505050565b34801561028857600080fd5b506101b3610297366004613055565b6118a0565b3480156102a857600080fd5b506101b36102b7366004613055565b6126cf565b3480156102c857600080fd5b506101b36102d7366004613055565b612b1a565b3480156102e857600080fd5b506102fc6102f7366004613055565b612b27565b60405161012f959493929190613309565b34801561031957600080fd5b5061018761032836600461335c565b63f23a6e6160e01b95945050505050565b34801561034557600080fd5b506101b36103543660046133c1565b612dc6565b60006001600160e01b03198216630271189760e51b148061038a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b8060008082815260036020526040902060029081015460ff16908111156103b9576103b961322c565b146103d7576040516339b5486f60e01b815260040160405180910390fd5b60008181526003602052604090206001015442106104085760405163bdef925160e01b815260040160405180910390fd5b6000828152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff16908111156104585761045861322c565b60028111156104695761046961322c565b8152604080516101208101909152600383810180546020909401939091839160ff169081111561049b5761049b61322c565b60038111156104ac576104ac61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156105055761050561322c565b60018111156105165761051661322c565b81526020016004820160019054906101000a900460ff16600181111561053e5761053e61322c565b600181111561054f5761054f61322c565b81526020016004820160029054906101000a900460ff1660018111156105775761057761322c565b60018111156105885761058861322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff1660038111156105da576105da61322c565b60038111156105eb576105eb61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156106445761064461322c565b60018111156106555761065561322c565b81526020016004820160019054906101000a900460ff16600181111561067d5761067d61322c565b600181111561068e5761068e61322c565b81526020016004820160029054906101000a900460ff1660018111156106b6576106b661322c565b60018111156106c7576106c761322c565b8152600491909101546001600160a01b03630100000090910481166020928301529190925260608401519091015192935091909116330390506109e4576000816060015160a0015160018111156107205761072061322c565b1461076c5760405162461bcd60e51b8152602060048201526017602482015276105cdcd95d081a5cc8185b1c9958591e481b1bd8dad959604a1b60448201526064015b60405180910390fd5b600060608201515160038111156107855761078561322c565b03610823578060600151604001516001600160a01b03166323b872dd33308460600151606001516040518463ffffffff1660e01b81526004016107ca939291906133dc565b600060405180830381600087803b1580156107e457600080fd5b505af11580156107f8573d6000803e3d6000fd5b505050600084815260036020526040902060070180546001925060ff191682805b0217905550505050565b6003606082015151600381111561083c5761083c61322c565b03610884578060600151604001516001600160a01b031663f242432a333084606001516060015160016040518563ffffffff1660e01b81526004016107ca9493929190613400565b6001606082015151600381111561089d5761089d61322c565b0361094757606081015160408082015160809092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd916108e191339130916004016133dc565b6020604051808303816000875af1158015610900573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109249190613438565b50600083815260036020526040902060070180546001919060ff19168280610819565b600260608201515160038111156109605761096061322c565b036109df578060600151608001513410156109bd5760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206c6f636b696e672066756e64730000000000006044820152606401610763565b600083815260036020526040902060070180546001919060ff19168280610819565b505050565b6000816080015160a001516001811115610a0057610a0061322c565b14610a475760405162461bcd60e51b8152602060048201526017602482015276105cdcd95d081a5cc8185b1c9958591e481b1bd8dad959604a1b6044820152606401610763565b60008381526003602052604081206008018054610100600160a81b03191633610100021790556080820151516003811115610a8457610a8461322c565b03610b1b57608081015160408082015160609092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91610ac891339130916004016133dc565b600060405180830381600087803b158015610ae257600080fd5b505af1158015610af6573d6000803e3d6000fd5b5050506000848152600360205260409020600c0180546001925060ff19168280610819565b60036080820151516003811115610b3457610b3461322c565b03610b7b5760808101516040808201516060909201519051637921219560e11b81526001600160a01b039092169163f242432a91610ac89133913091600190600401613400565b60016080820151516003811115610b9457610b9461322c565b03610c3f578060800151604001516001600160a01b03166323b872dd33308460800151608001516040518463ffffffff1660e01b8152600401610bd9939291906133dc565b6020604051808303816000875af1158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190613438565b506000838152600360205260409020600c0180546001919060ff19168280610819565b60026080820151516003811115610c5857610c5861322c565b036109df57806080015160800151341015610cb55760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206c6f636b696e672066756e64730000000000006044820152606401610763565b6000838152600360205260409020600c01805460ff19166001179055505050565b610cde612e3f565b4780610d1e5760405162461bcd60e51b815260206004820152600f60248201526e42616c616e6365206973207a65726f60881b6044820152606401610763565b600080546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015610d57573d6000803e3d6000fd5b5050565b610d63612e3f565b610d6d6000612e99565b565b60008181526003602081905260409091200154819061010090046001600160a01b0316336001600160a01b031614158015610dd2575060008181526003602052604090206008015461010090046001600160a01b0316336001600160a01b031614155b15610df057604051631e6b56c760e21b815260040160405180910390fd5b8160008082815260036020526040902060029081015460ff1690811115610e1957610e1961322c565b14610e37576040516339b5486f60e01b815260040160405180910390fd5b6000818152600360205260409020600101544210610e685760405163bdef925160e01b815260040160405180910390fd5b6000838152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff1690811115610eb857610eb861322c565b6002811115610ec957610ec961322c565b8152604080516101208101909152600383810180546020909401939091839160ff1690811115610efb57610efb61322c565b6003811115610f0c57610f0c61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115610f6557610f6561322c565b6001811115610f7657610f7661322c565b81526020016004820160019054906101000a900460ff166001811115610f9e57610f9e61322c565b6001811115610faf57610faf61322c565b81526020016004820160029054906101000a900460ff166001811115610fd757610fd761322c565b6001811115610fe857610fe861322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff16600381111561103a5761103a61322c565b600381111561104b5761104b61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156110a4576110a461322c565b60018111156110b5576110b561322c565b81526020016004820160019054906101000a900460ff1660018111156110dd576110dd61322c565b60018111156110ee576110ee61322c565b81526020016004820160029054906101000a900460ff1660018111156111165761111661322c565b60018111156111275761112761322c565b8152600491909101546001600160a01b0363010000009091048116602092830152919092526060840151909101519293509190911633039050611289576001816060015160a0015160018111156111805761118061322c565b146111c35760405162461bcd60e51b8152602060048201526013602482015272105cdcd95d081a59081b9bdd081b1bd8dad959606a1b6044820152606401610763565b6000816060015160c0015160018111156111df576111df61322c565b146112285760405162461bcd60e51b8152602060048201526019602482015278105cdcd95d081a5cc8185b1c9958591e48185c1c1c9bdd9959603a1b6044820152606401610763565b6000848152600360205260409020600701805461ff001916610100179055608081015160c00151600190818111156112625761126261322c565b03611284576000848152600360205260409020600201805460ff191660011790555b6113c8565b6080810151602001516001600160a01b031633036113c8576001816080015160a0015160018111156112bd576112bd61322c565b146113005760405162461bcd60e51b8152602060048201526013602482015272105cdcd95d081a59081b9bdd081b1bd8dad959606a1b6044820152606401610763565b6000816080015160c00151600181111561131c5761131c61322c565b146113655760405162461bcd60e51b8152602060048201526019602482015278105cdcd95d081a5cc8185b1c9958591e48185c1c1c9bdd9959603a1b6044820152606401610763565b6000848152600360205260409020600c01805461ff001916610100179055606081015160c001516001908181111561139f5761139f61322c565b036113c857600084815260036020526040902060020180546001919060ff191682805b02179055505b50505050565b6002543410156113f15760405163154b71ff60e21b815260040160405180910390fd5b6000811180156114045750620151808111155b6114765760405162461bcd60e51b815260206004820152603960248201527f4578706972792074696d652073686f756c64206265206d6f7265207468616e2060448201527f6e6f7720616e64206c657373207468616e206f6e6520646179000000000000006064820152608401610763565b6001805490600061148683613470565b919050555060006040518061012001604052808b60038111156114ab576114ab61322c565b81523360208201526001600160a01b038b166040820152606081018a90526080810189905260a00160008152602001600081526020016000815260200160006001600160a01b0316815250905060006040518061012001604052808860038111156115185761151861322c565b815260200160006001600160a01b03168152602001876001600160a01b031681526020018681526020018581526020016000600181111561155b5761155b61322c565b81526020016000815260200160008152600060209182018190526040805160a08101909152338152929350919081016115948642613489565b8152602001600081526020808201869052604091820185905260018054600090815260038352839020845181546001600160a01b0319166001600160a01b0390911617815591840151828201559183015160028083018054959650869593949293909260ff1990911691849081111561160f5761160f61322c565b02179055506060820151805160038084018054909291839160ff19169060019084908111156116405761164061322c565b021790555060208201518154610100600160a81b0319166101006001600160a01b03928316021782556040830151600180840180546001600160a01b0319169290931691909117909155606083015160028301556080830151600383015560a08301516004830180549192909160ff19169083818111156116c3576116c361322c565b021790555060c082015160048201805461ff0019166101008360018111156116ed576116ed61322c565b021790555060e082015160048201805462ff00001916620100008360018111156117195761171961322c565b02179055506101009190910151600490910180546001600160a01b039092166301000000026301000000600160b81b031990921691909117905560808201518051600883018054909190829060ff1916600183600381111561177d5761177d61322c565b021790555060208201518154610100600160a81b0319166101006001600160a01b03928316021782556040830151600180840180546001600160a01b0319169290931691909117909155606083015160028301556080830151600383015560a08301516004830180549192909160ff19169083818111156118005761180061322c565b021790555060c082015160048201805461ff00191661010083600181111561182a5761182a61322c565b021790555060e082015160048201805462ff00001916620100008360018111156118565761185661322c565b02179055506101009190910151600490910180546001600160a01b039092166301000000026301000000600160b81b03199092169190911790555050505050505050505050505050565b60008181526003602081905260409091200154819061010090046001600160a01b0316336001600160a01b031614158015611903575060008181526003602052604090206008015461010090046001600160a01b0316336001600160a01b031614155b1561192157604051631e6b56c760e21b815260040160405180910390fd5b60008281526003602052604090206001015442106119585760008281526003602052604090206002908101805460ff191690911790555b6000828152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff16908111156119a8576119a861322c565b60028111156119b9576119b961322c565b8152604080516101208101909152600383810180546020909401939091839160ff16908111156119eb576119eb61322c565b60038111156119fc576119fc61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115611a5557611a5561322c565b6001811115611a6657611a6661322c565b81526020016004820160019054906101000a900460ff166001811115611a8e57611a8e61322c565b6001811115611a9f57611a9f61322c565b81526020016004820160029054906101000a900460ff166001811115611ac757611ac761322c565b6001811115611ad857611ad861322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff166003811115611b2a57611b2a61322c565b6003811115611b3b57611b3b61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115611b9457611b9461322c565b6001811115611ba557611ba561322c565b81526020016004820160019054906101000a900460ff166001811115611bcd57611bcd61322c565b6001811115611bde57611bde61322c565b81526020016004820160029054906101000a900460ff166001811115611c0657611c0661322c565b6001811115611c1757611c1761322c565b815260049190910154630100000090046001600160a01b03166020909101529052509050600081604001516002811115611c5357611c5361322c565b03611c935760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b6044820152606401610763565b6060810151602001516001600160a01b0316330361222e57600181604001516002811115611cc357611cc361322c565b03611ef65760008381526003602081905260408220600c01805462010000600160b81b0319163363010000000262ff00001916176201000017905560808301515190811115611d1457611d1461322c565b03611d8f57608081015160408082015160609092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91611d5891309133916004016133dc565b600060405180830381600087803b158015611d7257600080fd5b505af1158015611d86573d6000803e3d6000fd5b50505050505050565b60036080820151516003811115611da857611da861322c565b03611def5760808101516040808201516060909201519051637921219560e11b81526001600160a01b039092169163f242432a91611d589130913391600190600401613400565b60016080820151516003811115611e0857611e0861322c565b03611e8f576080808201516040808201519190920151915163a9059cbb60e01b815233600482015260248101929092526001600160a01b03169063a9059cbb906044015b6020604051808303816000875af1158015611e6b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c89190613438565b60026080820151516003811115611ea857611ea861322c565b036109df578060600151602001516001600160a01b03166108fc8260800151608001519081150290604051600060405180830381858888f193505050501580156113c8573d6000803e3d6000fd5b600281604001516002811115611f0e57611f0e61322c565b036121b0576001816060015160a001516001811115611f2f57611f2f61322c565b14611f745760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d0810481a5cc81b9bdd081b1bd8dad959605a1b6044820152606401610763565b6000816060015160e001516001811115611f9057611f9061322c565b14611fdd5760405162461bcd60e51b815260206004820152601a60248201527f4173736574204120697320616c726561647920636c61696d65640000000000006044820152606401610763565b60008381526003602081905260408220600701805462010000600160b81b0319163363010000000262ff000019161762010000179055606083015151908111156120295761202961322c565b0361206e578060600151604001516001600160a01b03166323b872dd30338460600151606001516040518463ffffffff1660e01b8152600401611d58939291906133dc565b600360608201515160038111156120875761208761322c565b036120cf578060600151604001516001600160a01b031663f242432a303384606001516060015160016040518563ffffffff1660e01b8152600401611d589493929190613400565b600160608201515160038111156120e8576120e861322c565b0361214c576060810151604080820151608090920151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015611e6b573d6000803e3d6000fd5b600260608201515160038111156121655761216561322c565b036109df57606081015160208101516080909101516040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156113c8573d6000803e3d6000fd5b6000816040015160028111156121c8576121c861322c565b036109df576001816060015160a0015160018111156121e9576121e961322c565b146109df5760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d0810481a5cc81b9bdd081b1bd8dad959605a1b6044820152606401610763565b6080810151602001516001600160a01b031633036109df5760018160400151600281111561225e5761225e61322c565b0361241f5760008381526003602081905260408220600701805462010000600160b81b0319163363010000000262ff000019161762010000179055606083015151908111156122af576122af61322c565b036122f4578060600151604001516001600160a01b03166323b872dd30338460600151606001516040518463ffffffff1660e01b8152600401611d58939291906133dc565b6003606082015151600381111561230d5761230d61322c565b03612355578060600151604001516001600160a01b031663f242432a303384606001516060015160016040518563ffffffff1660e01b8152600401611d589493929190613400565b6001606082015151600381111561236e5761236e61322c565b036123b8576060810151604080820151608090920151905163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb90604401611e4c565b600260608201515160038111156123d1576123d161322c565b036109df578060800151602001516001600160a01b03166108fc8260600151608001519081150290604051600060405180830381858888f193505050501580156113c8573d6000803e3d6000fd5b6002816040015160028111156124375761243761322c565b036109df576000816080015160e0015160018111156124585761245861322c565b146124a55760405162461bcd60e51b815260206004820152601a60248201527f4173736574204220697320616c726561647920636c61696d65640000000000006044820152606401610763565b6001816080015160a0015160018111156124c1576124c161322c565b146125065760405162461bcd60e51b8152602060048201526015602482015274105cdcd95d0810881a5cc81b9bdd081b1bd8dad959605a1b6044820152606401610763565b60008381526003602081905260408220600c0180546301000000330262010000600160b81b031990911617620100001790556080830151519081111561254e5761254e61322c565b0361259257608081015160408082015160609092015190516323b872dd60e01b81526001600160a01b03909216916323b872dd91611d5891309133916004016133dc565b600360808201515160038111156125ab576125ab61322c565b036125f25760808101516040808201516060909201519051637921219560e11b81526001600160a01b039092169163f242432a91611d589130913391600190600401613400565b6001608082015151600381111561260b5761260b61322c565b0361266d576080808201516040808201519190920151915163a9059cbb60e01b815233600482015260248101929092526001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611e6b573d6000803e3d6000fd5b600260808201515160038111156126865761268661322c565b036109df5760808082015160208101519101516040516001600160a01b039092169181156108fc0291906000818181858888f193505050501580156113c8573d6000803e3d6000fd5b60008181526003602052604090205481906001600160a01b0316336001600160a01b03161461271157604051631e6b56c760e21b815260040160405180910390fd5b8160008082815260036020526040902060029081015460ff169081111561273a5761273a61322c565b14612758576040516339b5486f60e01b815260040160405180910390fd5b60008181526003602052604090206001015442106127895760405163bdef925160e01b815260040160405180910390fd5b6000838152600360209081526040808320815160a08101835281546001600160a01b03168152600182015493810193909352600280820154919284019160ff16908111156127d9576127d961322c565b60028111156127ea576127ea61322c565b8152604080516101208101909152600383810180546020909401939091839160ff169081111561281c5761281c61322c565b600381111561282d5761282d61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156128865761288661322c565b60018111156128975761289761322c565b81526020016004820160019054906101000a900460ff1660018111156128bf576128bf61322c565b60018111156128d0576128d061322c565b81526020016004820160029054906101000a900460ff1660018111156128f8576128f861322c565b60018111156129095761290961322c565b815260049190910154630100000090046001600160a01b03166020918201529082526040805161012081019091526008840180549390920192909190829060ff16600381111561295b5761295b61322c565b600381111561296c5761296c61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff16908111156129c5576129c561322c565b60018111156129d6576129d661322c565b81526020016004820160019054906101000a900460ff1660018111156129fe576129fe61322c565b6001811115612a0f57612a0f61322c565b81526020016004820160029054906101000a900460ff166001811115612a3757612a3761322c565b6001811115612a4857612a4861322c565b815260049190910154630100000090046001600160a01b031660209091015290525090506000816060015160c001516001811115612a8857612a8861322c565b1480612aad57506000816080015160c001516001811115612aab57612aab61322c565b145b612af95760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f742063616e63656c20746865206c6f636b626f78206e6f770000006044820152606401610763565b60008481526003602052604090206002908101805460ff19166001836113c2565b612b22612e3f565b600255565b6003602081905260009182526040918290208054600182015460028301548551610120810190965283850180546001600160a01b0390941696929560ff9283169594919284921690811115612b7e57612b7e61322c565b6003811115612b8f57612b8f61322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115612be857612be861322c565b6001811115612bf957612bf961322c565b81526020016004820160019054906101000a900460ff166001811115612c2157612c2161322c565b6001811115612c3257612c3261322c565b81526020016004820160029054906101000a900460ff166001811115612c5a57612c5a61322c565b6001811115612c6b57612c6b61322c565b815260049190910154630100000090046001600160a01b0316602090910152604080516101208101909152600883018054929392829060ff166003811115612cb557612cb561322c565b6003811115612cc657612cc661322c565b815281546001600160a01b036101009091048116602083015260018084015490911660408301526002830154606083015260038301546080830152600483015460a09092019160ff1690811115612d1f57612d1f61322c565b6001811115612d3057612d3061322c565b81526020016004820160019054906101000a900460ff166001811115612d5857612d5861322c565b6001811115612d6957612d6961322c565b81526020016004820160029054906101000a900460ff166001811115612d9157612d9161322c565b6001811115612da257612da261322c565b815260049190910154630100000090046001600160a01b0316602090910152905085565b612dce612e3f565b6001600160a01b038116612e335760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610763565b612e3c81612e99565b50565b6000546001600160a01b03163314610d6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610763565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215612efb57600080fd5b81356001600160e01b031981168114612f1357600080fd5b9392505050565b80356001600160a01b0381168114612f3157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612f7557612f75612f36565b604052919050565b600082601f830112612f8e57600080fd5b813567ffffffffffffffff811115612fa857612fa8612f36565b612fbb601f8201601f1916602001612f4c565b818152846020838601011115612fd057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561300357600080fd5b61300c85612f1a565b935061301a60208601612f1a565b925060408501359150606085013567ffffffffffffffff81111561303d57600080fd5b61304987828801612f7d565b91505092959194509250565b60006020828403121561306757600080fd5b5035919050565b803560048110612f3157600080fd5b60008060008060008060008060006101208a8c03121561309c57600080fd5b6130a58a61306e565b98506130b360208b01612f1a565b975060408a0135965060608a013595506130cf60808b0161306e565b94506130dd60a08b01612f1a565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b600082601f83011261311357600080fd5b8135602067ffffffffffffffff82111561312f5761312f612f36565b8160051b61313e828201612f4c565b928352848101820192828101908785111561315857600080fd5b83870192505b848310156131775782358252918301919083019061315e565b979650505050505050565b600080600080600060a0868803121561319a57600080fd5b6131a386612f1a565b94506131b160208701612f1a565b9350604086013567ffffffffffffffff808211156131ce57600080fd5b6131da89838a01613102565b945060608801359150808211156131f057600080fd5b6131fc89838a01613102565b9350608088013591508082111561321257600080fd5b5061321f88828901612f7d565b9150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b600281106132525761325261322c565b9052565b8051600481106132685761326861322c565b80835250602081015161328660208401826001600160a01b03169052565b5060408101516132a160408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a08101516132c860a0840182613242565b5060c08101516132db60c0840182613242565b5060e08101516132ee60e0840182613242565b50610100818101516001600160a01b038116848301526113c8565b6001600160a01b0386168152602081018590526102a08101600385106133315761333161322c565b8460408301526133446060830185613256565b613352610180830184613256565b9695505050505050565b600080600080600060a0868803121561337457600080fd5b61337d86612f1a565b945061338b60208701612f1a565b93506040860135925060608601359150608086013567ffffffffffffffff8111156133b557600080fd5b61321f88828901612f7d565b6000602082840312156133d357600080fd5b612f1382612f1a565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b60006020828403121561344a57600080fd5b81518015158114612f1357600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016134825761348261345a565b5060010190565b8082018082111561038a5761038a61345a56fea2646970667358221220a549769a63c23be55d8d5bec1685e68e3d376ed1ff7f146fb0ba3cc20f4854c864736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 687,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "counter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 690,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "boxFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 695,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "lockBoxInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockBoxInfo)826_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(ApprovalStatus)713": {
        "encoding": "inplace",
        "label": "enum LockBox.ApprovalStatus",
        "numberOfBytes": "1"
      },
      "t_enum(AssetType)700": {
        "encoding": "inplace",
        "label": "enum LockBox.AssetType",
        "numberOfBytes": "1"
      },
      "t_enum(ClaimStatus)707": {
        "encoding": "inplace",
        "label": "enum LockBox.ClaimStatus",
        "numberOfBytes": "1"
      },
      "t_enum(LockStatus)710": {
        "encoding": "inplace",
        "label": "enum LockBox.LockStatus",
        "numberOfBytes": "1"
      },
      "t_enum(Status)704": {
        "encoding": "inplace",
        "label": "enum LockBox.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(LockBoxInfo)826_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LockBox.LockBoxInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockBoxInfo)826_storage"
      },
      "t_struct(Asset)812_storage": {
        "encoding": "inplace",
        "label": "struct LockBox.Asset",
        "members": [
          {
            "astId": 792,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AssetType)700"
          },
          {
            "astId": 794,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "owner",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 796,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 798,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 800,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetQuantity",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 803,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "lockStatus",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(LockStatus)710"
          },
          {
            "astId": 806,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "approvalStatus",
            "offset": 1,
            "slot": "4",
            "type": "t_enum(ApprovalStatus)713"
          },
          {
            "astId": 809,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "claimStatus",
            "offset": 2,
            "slot": "4",
            "type": "t_enum(ClaimStatus)707"
          },
          {
            "astId": 811,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "claimedBy",
            "offset": 3,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(LockBoxInfo)826_storage": {
        "encoding": "inplace",
        "label": "struct LockBox.LockBoxInfo",
        "members": [
          {
            "astId": 814,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "lockBoxOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 816,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "expiryTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 819,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(Status)704"
          },
          {
            "astId": 822,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetA",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Asset)812_storage"
          },
          {
            "astId": 825,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetB",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(Asset)812_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}