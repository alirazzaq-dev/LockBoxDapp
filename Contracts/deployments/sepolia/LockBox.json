{
  "address": "0xee310FD5194122F165161cF777a025269a545aCf",
  "abi": [
    {
      "inputs": [],
      "name": "LockBox__EXPIRED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__EXPIRY_LIMIT_EXCEEDING",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__INSUFFICIENT_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__INSUFFICIENT_FUNDS_FOR_SWAP",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__INSUFFICIENT_LOCKING_FUNDS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__NOT_ALLOWED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__NOT_AVAILABLE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__NOT_PENDING_ANYMORE",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockBox__OUT_OF_BOUND_REQUEST",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        }
      ],
      "name": "cancelLockBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LockBox.AssetType",
          "name": "assetAtype",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "assetAaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetAID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetAQuantity",
          "type": "uint256"
        },
        {
          "internalType": "enum LockBox.AssetType",
          "name": "assetBtype",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "assetBaddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetBID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetBQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "createLockBox",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockBoxCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockBoxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        }
      ],
      "name": "getLockBoxInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "boxId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            },
            {
              "internalType": "enum LockBox.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "enum LockBox.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "assetID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetQuantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LockBox.Asset",
              "name": "assetA",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum LockBox.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "assetID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetQuantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LockBox.Asset",
              "name": "assetB",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "claimedBy",
              "type": "address"
            }
          ],
          "internalType": "struct LockBox.LockBoxInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "getLockBoxesInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "boxId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            },
            {
              "internalType": "enum LockBox.Status",
              "name": "status",
              "type": "uint8"
            },
            {
              "components": [
                {
                  "internalType": "enum LockBox.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "assetID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetQuantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LockBox.Asset",
              "name": "assetA",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum LockBox.AssetType",
                  "name": "assetType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "assetAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "assetID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "assetQuantity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct LockBox.Asset",
              "name": "assetB",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "claimedBy",
              "type": "address"
            }
          ],
          "internalType": "struct LockBox.LockBoxInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "boxId",
          "type": "uint256"
        }
      ],
      "name": "swapAssets",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateBoxFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6bc0419399a6fd9df3360ef43cc4c656a9aabf98f309327b57bd11dd788e4612",
  "receipt": {
    "to": null,
    "from": "0x6Fb08a7d994570a16322c1eA2d8D9936719761B9",
    "contractAddress": "0xee310FD5194122F165161cF777a025269a545aCf",
    "transactionIndex": 0,
    "gasUsed": "1816718",
    "logsBloom": "0x
    "blockHash": "0xdd842980c047b2e145aea8c0adbdad447fda6c149e069c9d48cf3101f1927def",
    "transactionHash": "0x6bc0419399a6fd9df3360ef43cc4c656a9aabf98f309327b57bd11dd788e4612",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3997497,
        "transactionHash": "0x6bc0419399a6fd9df3360ef43cc4c656a9aabf98f309327b57bd11dd788e4612",
        "address": "0xee310FD5194122F165161cF777a025269a545aCf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006fb08a7d994570a16322c1ea2d8d9936719761b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdd842980c047b2e145aea8c0adbdad447fda6c149e069c9d48cf3101f1927def"
      }
    ],
    "blockNumber": 3997497,
    "cumulativeGasUsed": "1816718",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5e4df3b18fde4eba52b7a2d7ee91068d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LockBox__EXPIRED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__EXPIRY_LIMIT_EXCEEDING\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__INSUFFICIENT_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__INSUFFICIENT_FUNDS_FOR_SWAP\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__INSUFFICIENT_LOCKING_FUNDS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__NOT_ALLOWED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__NOT_AVAILABLE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__NOT_PENDING_ANYMORE\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockBox__OUT_OF_BOUND_REQUEST\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"cancelLockBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetAtype\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetAQuantity\",\"type\":\"uint256\"},{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetBtype\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetBaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetBID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetBQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"createLockBox\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockBoxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockBoxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"getLockBoxInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"enum LockBox.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct LockBox.Asset\",\"name\":\"assetA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct LockBox.Asset\",\"name\":\"assetB\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"claimedBy\",\"type\":\"address\"}],\"internalType\":\"struct LockBox.LockBoxInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getLockBoxesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"},{\"internalType\":\"enum LockBox.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct LockBox.Asset\",\"name\":\"assetA\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum LockBox.AssetType\",\"name\":\"assetType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetQuantity\",\"type\":\"uint256\"}],\"internalType\":\"struct LockBox.Asset\",\"name\":\"assetB\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"claimedBy\",\"type\":\"address\"}],\"internalType\":\"struct LockBox.LockBoxInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"boxId\",\"type\":\"uint256\"}],\"name\":\"swapAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateBoxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LockBox.sol\":\"LockBox\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x67ef46fef257faae47adb630aad49694dda0334e5f7a7c5fb386243b974886b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LockBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ERC721Holder} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\r\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\r\\n\\r\\n// import {console} from \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract LockBox is Ownable, ERC721Holder, ERC1155Holder {\\r\\n\\r\\n    error LockBox__NOT_ALLOWED();\\r\\n    error LockBox__NOT_PENDING_ANYMORE();\\r\\n    error LockBox__EXPIRED();\\r\\n    error LockBox__INSUFFICIENT_FUNDS();\\r\\n    error LockBox__NOT_AVAILABLE();\\r\\n    error LockBox__OUT_OF_BOUND_REQUEST();\\r\\n    error LockBox__INSUFFICIENT_LOCKING_FUNDS();\\r\\n    error LockBox__EXPIRY_LIMIT_EXCEEDING();\\r\\n    error LockBox__INSUFFICIENT_FUNDS_FOR_SWAP();\\r\\n\\r\\n    uint256 private s_expiryTime = 1 days;\\r\\n    uint256 private s_counter;\\r\\n    uint256 private s_boxFee = 0.01 ether;\\r\\n    mapping (uint256 => LockBoxInfo) private s_lockBoxInfo;\\r\\n\\r\\n\\r\\n    enum AssetType {NFT, TOKEN, COIN, ERC1155}\\r\\n    enum Status {PENDING, SUCCEED, FAILED, CANCELLED}\\r\\n\\r\\n\\r\\n    struct Asset {\\r\\n        AssetType assetType;\\r\\n        address assetAddress;\\r\\n        uint assetID;\\r\\n        uint assetQuantity;\\r\\n    }\\r\\n\\r\\n    struct LockBoxInfo {\\r\\n        uint256 boxId;\\r\\n        address owner;\\r\\n        uint256 expiryTime;\\r\\n        Status status;\\r\\n        Asset assetA;\\r\\n        Asset assetB;\\r\\n        address claimedBy;\\r\\n    }\\r\\n\\r\\n\\r\\n    function createLockBox(\\r\\n        AssetType assetAtype, address assetAaddress, uint256 assetAID, uint256 assetAQuantity,\\r\\n        AssetType assetBtype, address assetBaddress, uint256 assetBID, uint256 assetBQuantity,\\r\\n        uint256 expiryTime\\r\\n        ) public payable {\\r\\n        \\r\\n\\r\\n        if(msg.value < s_boxFee){\\r\\n            revert LockBox__INSUFFICIENT_FUNDS();\\r\\n        }\\r\\n\\r\\n        if(expiryTime > s_expiryTime){\\r\\n            revert LockBox__EXPIRY_LIMIT_EXCEEDING();\\r\\n        } \\r\\n\\r\\n    \\r\\n        if(assetAtype == AssetType.NFT) {\\r\\n            IERC721(assetAaddress).transferFrom(msg.sender, address(this), assetAID);\\r\\n        }\\r\\n        else if(assetAtype == AssetType.ERC1155) {\\r\\n            IERC1155(assetAaddress).safeTransferFrom(msg.sender, address(this), assetAID, assetAQuantity, \\\"\\\");\\r\\n        }\\r\\n        else if(assetAtype == AssetType.TOKEN) {\\r\\n            IERC20(assetAaddress).transferFrom(msg.sender, address(this), assetAQuantity);\\r\\n        }\\r\\n        else if(assetAtype == AssetType.COIN) {\\r\\n            if(msg.value < assetAQuantity + s_boxFee){\\r\\n                revert LockBox__INSUFFICIENT_LOCKING_FUNDS();\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        Asset memory assetA = Asset ({\\r\\n            assetType: assetAtype,\\r\\n            assetAddress: assetAaddress,\\r\\n            assetID: assetAID,\\r\\n            assetQuantity: assetAQuantity\\r\\n        });\\r\\n\\r\\n        Asset memory assetB = Asset ({\\r\\n            assetType: assetBtype,\\r\\n            assetAddress: assetBaddress,\\r\\n            assetID: assetBID,\\r\\n            assetQuantity: assetBQuantity\\r\\n        });\\r\\n\\r\\n        uint256 id = ++s_counter;\\r\\n\\r\\n        LockBoxInfo memory lockBox =  LockBoxInfo ({\\r\\n            boxId: id,\\r\\n            owner: msg.sender,\\r\\n            expiryTime: block.timestamp + expiryTime,\\r\\n            status: Status.PENDING,\\r\\n            assetA: assetA,\\r\\n            assetB: assetB,\\r\\n            claimedBy: address(0)\\r\\n        });\\r\\n\\r\\n        s_lockBoxInfo[id] = lockBox;\\r\\n   \\r\\n    }\\r\\n\\r\\n    function swapAssets(uint256 boxId) public payable {\\r\\n        \\r\\n        LockBoxInfo memory lockBox = s_lockBoxInfo[boxId];\\r\\n        Asset memory assetA = lockBox.assetA;\\r\\n        Asset memory assetB = lockBox.assetB;\\r\\n\\r\\n        if(block.timestamp >= lockBox.expiryTime){\\r\\n            revert LockBox__EXPIRED();\\r\\n        }\\r\\n\\r\\n        if(lockBox.status != Status.PENDING){\\r\\n            revert LockBox__NOT_AVAILABLE();\\r\\n        }\\r\\n\\r\\n    \\r\\n        if(assetB.assetType == AssetType.NFT) {\\r\\n            IERC721(assetB.assetAddress).transferFrom(msg.sender, lockBox.owner, assetB.assetID);\\r\\n        }\\r\\n        else if(assetB.assetType == AssetType.ERC1155) {\\r\\n            IERC1155(assetB.assetAddress).safeTransferFrom(msg.sender, lockBox.owner, assetB.assetID, assetB.assetQuantity, \\\"\\\");\\r\\n        }\\r\\n        else if(assetB.assetType == AssetType.TOKEN) {\\r\\n            IERC20(assetB.assetAddress).transferFrom(msg.sender, lockBox.owner, assetB.assetQuantity);\\r\\n        }\\r\\n        else if(assetB.assetType == AssetType.COIN) {\\r\\n            if(msg.value < assetB.assetQuantity){\\r\\n                revert LockBox__INSUFFICIENT_FUNDS_FOR_SWAP();\\r\\n            }\\r\\n            payable(lockBox.owner).transfer(assetB.assetQuantity);\\r\\n            \\r\\n        }\\r\\n\\r\\n        \\r\\n        if(assetA.assetType == AssetType.NFT) {\\r\\n            IERC721(assetA.assetAddress).transferFrom(address(this), msg.sender, assetA.assetID);\\r\\n        }\\r\\n        else if(assetA.assetType == AssetType.ERC1155) {\\r\\n            IERC1155(assetA.assetAddress).safeTransferFrom(address(this), msg.sender, assetA.assetID, assetA.assetQuantity, \\\"\\\");\\r\\n        }\\r\\n        else if(assetA.assetType == AssetType.TOKEN) {\\r\\n            IERC20(assetA.assetAddress).transferFrom(address(this), msg.sender, assetA.assetQuantity);\\r\\n        }\\r\\n        else if(assetA.assetType == AssetType.COIN) {\\r\\n            payable(msg.sender).transfer(assetA.assetQuantity);\\r\\n        }\\r\\n\\r\\n        s_lockBoxInfo[boxId].claimedBy = msg.sender;\\r\\n        s_lockBoxInfo[boxId].status = Status.SUCCEED;\\r\\n        \\r\\n\\r\\n    }\\r\\n\\r\\n    function cancelLockBox(uint256 boxId) public {\\r\\n\\r\\n        LockBoxInfo memory lockBox = s_lockBoxInfo[boxId];\\r\\n        Asset memory assetA = lockBox.assetA;\\r\\n\\r\\n\\r\\n        require( msg.sender == lockBox.owner, \\\"Already claimed by someone\\\");\\r\\n        require( lockBox.claimedBy == address(0), \\\"Already claimed by someone\\\");\\r\\n\\r\\n\\r\\n        if(assetA.assetType == AssetType.NFT) {\\r\\n            IERC721(assetA.assetAddress).transferFrom(address(this), lockBox.owner, assetA.assetID);\\r\\n        }\\r\\n        else if(assetA.assetType == AssetType.ERC1155) {\\r\\n            IERC1155(assetA.assetAddress).safeTransferFrom(address(this), lockBox.owner, assetA.assetID, assetA.assetQuantity, \\\"\\\");\\r\\n        }\\r\\n        else if(assetA.assetType == AssetType.TOKEN) {\\r\\n            IERC20(assetA.assetAddress).transferFrom(address(this), lockBox.owner, assetA.assetQuantity);\\r\\n        }\\r\\n        else if(assetA.assetType == AssetType.COIN) {\\r\\n            payable(lockBox.owner).transfer(assetA.assetQuantity);\\r\\n        }\\r\\n\\r\\n        s_lockBoxInfo[boxId].status = Status.CANCELLED;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /* Getters */\\r\\n    function getLockBoxCount() public view returns(uint) {\\r\\n        return s_counter;\\r\\n    }\\r\\n\\r\\n    function getLockBoxInfo(uint256 boxId) public view returns(LockBoxInfo memory) {\\r\\n        return s_lockBoxInfo[boxId];\\r\\n    }\\r\\n\\r\\n    function getLockBoxesInfo(uint256 from, uint256 count) public view returns(LockBoxInfo[] memory) {\\r\\n\\r\\n        if (from > s_counter) {\\r\\n            revert LockBox__OUT_OF_BOUND_REQUEST();\\r\\n        }\\r\\n\\r\\n        if (count > from) {\\r\\n            count = from;\\r\\n        }\\r\\n\\r\\n        uint256 to = from - count;\\r\\n\\r\\n        uint256 index = 0;\\r\\n        LockBoxInfo[] memory lockBoxes = new LockBoxInfo[](count);\\r\\n        \\r\\n        for (uint256 i = from; i > to; i--) {\\r\\n            lockBoxes[index] = s_lockBoxInfo[i];\\r\\n            index++;\\r\\n        }\\r\\n\\r\\n        return lockBoxes;\\r\\n\\r\\n    }\\r\\n\\r\\n    function getLockBoxFee() public view returns(uint) {\\r\\n        return s_boxFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    /* Only owner */\\r\\n    function withdrawFunds() public onlyOwner {\\r\\n        uint balance = address(this).balance;\\r\\n        require(balance > 0, \\\"Balance is zero\\\");\\r\\n        payable(owner()).transfer(balance);\\r\\n    }\\r\\n\\r\\n    function updateBoxFee(uint _fee) public onlyOwner {\\r\\n        s_boxFee = _fee;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xf46c7dd31a90ce08842a828c028a3e4c4c6a5bf71872817ded0c898128168090\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262015180600155662386f26fc1000060035534801561002257600080fd5b5061002c33610031565b610081565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611ea2806100906000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063e18ec21811610059578063e18ec218146102b0578063f23a6e61146102d0578063f2fde38b146102fc578063ffbdbb111461031c57600080fd5b80638da5cb5b1461020f578063bad1d5d214610237578063bc197c8114610264578063d3f29c331461029057600080fd5b8063403ba10c116100c6578063403ba10c146101a757806363828752146101d4578063715018a6146101e75780638a88cbbe146101fc57600080fd5b806301ffc9a7146100f8578063150b7a021461012d57806316d19b4f1461017157806324600fc314610190575b600080fd5b34801561010457600080fd5b5061011861011336600461184c565b610331565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b50610158610148366004611950565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610124565b34801561017d57600080fd5b506002545b604051908152602001610124565b34801561019c57600080fd5b506101a5610368565b005b3480156101b357600080fd5b506101c76101c23660046119b8565b6103f2565b6040516101249190611ab7565b6101a56101e2366004611b06565b610664565b3480156101f357600080fd5b506101a5610c5e565b6101a561020a366004611b2e565b610c72565b34801561021b57600080fd5b506000546040516001600160a01b039091168152602001610124565b34801561024357600080fd5b50610257610252366004611b06565b6110b0565b6040516101249190611bb3565b34801561027057600080fd5b5061015861027f366004611c42565b63bc197c8160e01b95945050505050565b34801561029c57600080fd5b506101a56102ab366004611b06565b611245565b3480156102bc57600080fd5b506101a56102cb366004611b06565b61168c565b3480156102dc57600080fd5b506101586102eb366004611cec565b63f23a6e6160e01b95945050505050565b34801561030857600080fd5b506101a5610317366004611d51565b611699565b34801561032857600080fd5b50600354610182565b60006001600160e01b03198216630271189760e51b148061036257506301ffc9a760e01b6001600160e01b03198316145b92915050565b610370611712565b47806103b55760405162461bcd60e51b815260206004820152600f60248201526e42616c616e6365206973207a65726f60881b60448201526064015b60405180910390fd5b600080546040516001600160a01b039091169183156108fc02918491818181858888f193505050501580156103ee573d6000803e3d6000fd5b5050565b606060025483111561041757604051630a2b22e360e31b815260040160405180910390fd5b82821115610423578291505b600061042f8385611d82565b90506000808467ffffffffffffffff81111561044d5761044d611899565b60405190808252806020026020018201604052801561048657816020015b6104736117bc565b81526020019060019003908161046b5790505b509050855b8381111561065a57600081815260046020908152604091829020825160e0810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600380830154919291606084019160ff909116908111156104f5576104f56119da565b6003811115610506576105066119da565b81526040805160808101909152600483018054602090930192829060ff166003811115610535576105356119da565b6003811115610546576105466119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff1660038111156105c5576105c56119da565b60038111156105d6576105d66119da565b815281546001600160a01b03610100909104811660208084019190915260018401546040840152600290930154606090920191909152918352600a939093015416910152825183908590811061062e5761062e611d95565b6020026020010181905250828061064490611dab565b935050808061065290611dc4565b91505061048b565b5095945050505050565b6000818152600460209081526040808320815160e0810183528154815260018201546001600160a01b031693810193909352600281015491830191909152600380820154606084019160ff909116908111156106c2576106c26119da565b60038111156106d3576106d36119da565b81526040805160808101909152600483018054602090930192829060ff166003811115610702576107026119da565b6003811115610713576107136119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff166003811115610792576107926119da565b60038111156107a3576107a36119da565b815281546001600160a01b0361010090910481166020808401919091526001840154604080850191909152600290940154606090930192909252928452600a94909401549091169190920152608082015160a0830151918301519293509142106108205760405163bdef925160e01b815260040160405180910390fd5b600083606001516003811115610838576108386119da565b14610856576040516318dcd75160e01b815260040160405180910390fd5b60008151600381111561086b5761086b6119da565b036108e35780602001516001600160a01b03166323b872dd33856020015184604001516040518463ffffffff1660e01b81526004016108ac93929190611ddb565b600060405180830381600087803b1580156108c657600080fd5b505af11580156108da573d6000803e3d6000fd5b50505050610a60565b6003815160038111156108f8576108f86119da565b0361093f5780602001516001600160a01b031663f242432a338560200151846040015185606001516040518563ffffffff1660e01b81526004016108ac9493929190611dff565b600181516003811115610954576109546119da565b036109de576020808201519084015160608301516040516323b872dd60e01b81526001600160a01b03909316926323b872dd92610995923392600401611ddb565b6020604051808303816000875af11580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190611e37565b50610a60565b6002815160038111156109f3576109f36119da565b03610a60578060600151341015610a1d5760405163dc5ddc2560e01b815260040160405180910390fd5b82602001516001600160a01b03166108fc82606001519081150290604051600060405180830381858888f19350505050158015610a5e573d6000803e3d6000fd5b505b600082516003811115610a7557610a756119da565b03610ae95781602001516001600160a01b03166323b872dd303385604001516040518463ffffffff1660e01b8152600401610ab293929190611ddb565b600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b50505050610c29565b600382516003811115610afe57610afe6119da565b03610b415781602001516001600160a01b031663f242432a3033856040015186606001516040518563ffffffff1660e01b8152600401610ab29493929190611dff565b600182516003811115610b5657610b566119da565b03610bdd57602082015160608301516040516323b872dd60e01b81526001600160a01b03909216916323b872dd91610b949130913391600401611ddb565b6020604051808303816000875af1158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190611e37565b50610c29565b600282516003811115610bf257610bf26119da565b03610c29576060820151604051339180156108fc02916000818181858888f19350505050158015610c27573d6000803e3d6000fd5b505b5050506000908152600460205260409020600a810180546001600160a01b03191633179055600301805460ff19166001179055565b610c66611712565b610c70600061176c565b565b600354341015610c955760405163154b71ff60e21b815260040160405180910390fd5b600154811115610cb85760405163db68f95560e01b815260040160405180910390fd5b6000896003811115610ccc57610ccc6119da565b03610d38576040516323b872dd60e01b81526001600160a01b038916906323b872dd90610d0190339030908c90600401611ddb565b600060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b50505050610e5b565b6003896003811115610d4c57610d4c6119da565b03610d8357604051637921219560e11b81526001600160a01b0389169063f242432a90610d0190339030908c908c90600401611dff565b6001896003811115610d9757610d976119da565b03610e15576040516323b872dd60e01b81526001600160a01b038916906323b872dd90610dcc90339030908b90600401611ddb565b6020604051808303816000875af1158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f9190611e37565b50610e5b565b6002896003811115610e2957610e296119da565b03610e5b57600354610e3b9087611e59565b341015610e5b57604051636f8abb2160e11b815260040160405180910390fd5b600060405180608001604052808b6003811115610e7a57610e7a6119da565b81526020018a6001600160a01b0316815260200189815260200188815250905060006040518060800160405280886003811115610eb957610eb96119da565b8152602001876001600160a01b031681526020018681526020018581525090506000600260008154610eea90611dab565b91829055506040805160e081018252828152336020820152919250600091908101610f158742611e59565b81526000602080830182905260408084018990526060808501899052608090940183905286835260048252918290208451815590840151600180830180546001600160a01b0319166001600160a01b0390931692909217909155918401516002820155918301516003808401805495965086959293909260ff1916918490811115610fa257610fa26119da565b021790555060808201518051600483018054909190829060ff19166001836003811115610fd157610fd16119da565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b0319909116178155604082015160018083019190915560609092015160029091015560a0830151805160078401805492939092839160ff1990911690836003811115611042576110426119da565b021790555060208201518154610100600160a81b0319166101006001600160a01b03928316021782556040830151600183015560609092015160029091015560c09290920151600a9190910180546001600160a01b0319169190921617905550505050505050505050505050565b6110b86117bc565b600082815260046020908152604091829020825160e0810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600380830154919291606084019160ff9091169081111561111a5761111a6119da565b600381111561112b5761112b6119da565b81526040805160808101909152600483018054602090930192829060ff16600381111561115a5761115a6119da565b600381111561116b5761116b6119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff1660038111156111ea576111ea6119da565b60038111156111fb576111fb6119da565b815281546001600160a01b03610100909104811660208084019190915260018401546040840152600290930154606090920191909152918352600a93909301541691015292915050565b6000818152600460209081526040808320815160e0810183528154815260018201546001600160a01b031693810193909352600281015491830191909152600380820154606084019160ff909116908111156112a3576112a36119da565b60038111156112b4576112b46119da565b81526040805160808101909152600483018054602090930192829060ff1660038111156112e3576112e36119da565b60038111156112f4576112f46119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff166003811115611373576113736119da565b6003811115611384576113846119da565b8152815461010090046001600160a01b0390811660208084019190915260018401546040840152600290930154606090920191909152918352600a9390930154811691830191909152608083015191830151929350909116331461142a5760405162461bcd60e51b815260206004820152601a60248201527f416c726561647920636c61696d656420627920736f6d656f6e6500000000000060448201526064016103ac565b60c08201516001600160a01b0316156114855760405162461bcd60e51b815260206004820152601a60248201527f416c726561647920636c61696d656420627920736f6d656f6e6500000000000060448201526064016103ac565b60008151600381111561149a5761149a6119da565b036115125780602001516001600160a01b03166323b872dd30846020015184604001516040518463ffffffff1660e01b81526004016114db93929190611ddb565b600060405180830381600087803b1580156114f557600080fd5b505af1158015611509573d6000803e3d6000fd5b5050505061166a565b600381516003811115611527576115276119da565b0361156e5780602001516001600160a01b031663f242432a308460200151846040015185606001516040518563ffffffff1660e01b81526004016114db9493929190611dff565b600181516003811115611583576115836119da565b0361160d576020808201519083015160608301516040516323b872dd60e01b81526001600160a01b03909316926323b872dd926115c4923092600401611ddb565b6020604051808303816000875af11580156115e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116079190611e37565b5061166a565b600281516003811115611622576116226119da565b0361166a5781602001516001600160a01b03166108fc82606001519081150290604051600060405180830381858888f19350505050158015611668573d6000803e3d6000fd5b505b505060009081526004602052604090206003908101805460ff19169091179055565b611694611712565b600355565b6116a1611712565b6001600160a01b0381166117065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ac565b61170f8161176c565b50565b6000546001600160a01b03163314610c705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160e08101825260008082526020820181905291810182905290606082019081526020016118186040805160808101909152806000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152604080516080810182526000808252602082810182905292820181905260608201529101908152600060209091015290565b60006020828403121561185e57600080fd5b81356001600160e01b03198116811461187657600080fd5b9392505050565b80356001600160a01b038116811461189457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156118d8576118d8611899565b604052919050565b600082601f8301126118f157600080fd5b813567ffffffffffffffff81111561190b5761190b611899565b61191e601f8201601f19166020016118af565b81815284602083860101111561193357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561196657600080fd5b61196f8561187d565b935061197d6020860161187d565b925060408501359150606085013567ffffffffffffffff8111156119a057600080fd5b6119ac878288016118e0565b91505092959194509250565b600080604083850312156119cb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b6004811061170f57634e487b7160e01b600052602160045260246000fd5b8051611a19816119f0565b82526020818101516001600160a01b03169083015260408082015190830152606090810151910152565b80518252602081015160018060a01b0380821660208501526040830151604085015260608301519150611a75826119f0565b81606085015260808301519150611a8f6080850183611a0e565b60a08301519150611aa4610100850183611a0e565b8060c08401511661018085015250505050565b6020808252825182820181905260009190848201906040850190845b81811015611afa57611ae6838551611a43565b928401926101a09290920191600101611ad3565b50909695505050505050565b600060208284031215611b1857600080fd5b5035919050565b80356004811061189457600080fd5b60008060008060008060008060006101208a8c031215611b4d57600080fd5b611b568a611b1f565b9850611b6460208b0161187d565b975060408a0135965060608a01359550611b8060808b01611b1f565b9450611b8e60a08b0161187d565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b6101a081016103628284611a43565b600082601f830112611bd357600080fd5b8135602067ffffffffffffffff821115611bef57611bef611899565b8160051b611bfe8282016118af565b9283528481018201928281019087851115611c1857600080fd5b83870192505b84831015611c3757823582529183019190830190611c1e565b979650505050505050565b600080600080600060a08688031215611c5a57600080fd5b611c638661187d565b9450611c716020870161187d565b9350604086013567ffffffffffffffff80821115611c8e57600080fd5b611c9a89838a01611bc2565b94506060880135915080821115611cb057600080fd5b611cbc89838a01611bc2565b93506080880135915080821115611cd257600080fd5b50611cdf888289016118e0565b9150509295509295909350565b600080600080600060a08688031215611d0457600080fd5b611d0d8661187d565b9450611d1b6020870161187d565b93506040860135925060608601359150608086013567ffffffffffffffff811115611d4557600080fd5b611cdf888289016118e0565b600060208284031215611d6357600080fd5b6118768261187d565b634e487b7160e01b600052601160045260246000fd5b8181038181111561036257610362611d6c565b634e487b7160e01b600052603260045260246000fd5b600060018201611dbd57611dbd611d6c565b5060010190565b600081611dd357611dd3611d6c565b506000190190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600060208284031215611e4957600080fd5b8151801515811461187657600080fd5b8082018082111561036257610362611d6c56fea2646970667358221220af9b09a8564fbb64625671e7cb2d1d646cefb70f4913df274b2b0840df5c989264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063e18ec21811610059578063e18ec218146102b0578063f23a6e61146102d0578063f2fde38b146102fc578063ffbdbb111461031c57600080fd5b80638da5cb5b1461020f578063bad1d5d214610237578063bc197c8114610264578063d3f29c331461029057600080fd5b8063403ba10c116100c6578063403ba10c146101a757806363828752146101d4578063715018a6146101e75780638a88cbbe146101fc57600080fd5b806301ffc9a7146100f8578063150b7a021461012d57806316d19b4f1461017157806324600fc314610190575b600080fd5b34801561010457600080fd5b5061011861011336600461184c565b610331565b60405190151581526020015b60405180910390f35b34801561013957600080fd5b50610158610148366004611950565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610124565b34801561017d57600080fd5b506002545b604051908152602001610124565b34801561019c57600080fd5b506101a5610368565b005b3480156101b357600080fd5b506101c76101c23660046119b8565b6103f2565b6040516101249190611ab7565b6101a56101e2366004611b06565b610664565b3480156101f357600080fd5b506101a5610c5e565b6101a561020a366004611b2e565b610c72565b34801561021b57600080fd5b506000546040516001600160a01b039091168152602001610124565b34801561024357600080fd5b50610257610252366004611b06565b6110b0565b6040516101249190611bb3565b34801561027057600080fd5b5061015861027f366004611c42565b63bc197c8160e01b95945050505050565b34801561029c57600080fd5b506101a56102ab366004611b06565b611245565b3480156102bc57600080fd5b506101a56102cb366004611b06565b61168c565b3480156102dc57600080fd5b506101586102eb366004611cec565b63f23a6e6160e01b95945050505050565b34801561030857600080fd5b506101a5610317366004611d51565b611699565b34801561032857600080fd5b50600354610182565b60006001600160e01b03198216630271189760e51b148061036257506301ffc9a760e01b6001600160e01b03198316145b92915050565b610370611712565b47806103b55760405162461bcd60e51b815260206004820152600f60248201526e42616c616e6365206973207a65726f60881b60448201526064015b60405180910390fd5b600080546040516001600160a01b039091169183156108fc02918491818181858888f193505050501580156103ee573d6000803e3d6000fd5b5050565b606060025483111561041757604051630a2b22e360e31b815260040160405180910390fd5b82821115610423578291505b600061042f8385611d82565b90506000808467ffffffffffffffff81111561044d5761044d611899565b60405190808252806020026020018201604052801561048657816020015b6104736117bc565b81526020019060019003908161046b5790505b509050855b8381111561065a57600081815260046020908152604091829020825160e0810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600380830154919291606084019160ff909116908111156104f5576104f56119da565b6003811115610506576105066119da565b81526040805160808101909152600483018054602090930192829060ff166003811115610535576105356119da565b6003811115610546576105466119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff1660038111156105c5576105c56119da565b60038111156105d6576105d66119da565b815281546001600160a01b03610100909104811660208084019190915260018401546040840152600290930154606090920191909152918352600a939093015416910152825183908590811061062e5761062e611d95565b6020026020010181905250828061064490611dab565b935050808061065290611dc4565b91505061048b565b5095945050505050565b6000818152600460209081526040808320815160e0810183528154815260018201546001600160a01b031693810193909352600281015491830191909152600380820154606084019160ff909116908111156106c2576106c26119da565b60038111156106d3576106d36119da565b81526040805160808101909152600483018054602090930192829060ff166003811115610702576107026119da565b6003811115610713576107136119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff166003811115610792576107926119da565b60038111156107a3576107a36119da565b815281546001600160a01b0361010090910481166020808401919091526001840154604080850191909152600290940154606090930192909252928452600a94909401549091169190920152608082015160a0830151918301519293509142106108205760405163bdef925160e01b815260040160405180910390fd5b600083606001516003811115610838576108386119da565b14610856576040516318dcd75160e01b815260040160405180910390fd5b60008151600381111561086b5761086b6119da565b036108e35780602001516001600160a01b03166323b872dd33856020015184604001516040518463ffffffff1660e01b81526004016108ac93929190611ddb565b600060405180830381600087803b1580156108c657600080fd5b505af11580156108da573d6000803e3d6000fd5b50505050610a60565b6003815160038111156108f8576108f86119da565b0361093f5780602001516001600160a01b031663f242432a338560200151846040015185606001516040518563ffffffff1660e01b81526004016108ac9493929190611dff565b600181516003811115610954576109546119da565b036109de576020808201519084015160608301516040516323b872dd60e01b81526001600160a01b03909316926323b872dd92610995923392600401611ddb565b6020604051808303816000875af11580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190611e37565b50610a60565b6002815160038111156109f3576109f36119da565b03610a60578060600151341015610a1d5760405163dc5ddc2560e01b815260040160405180910390fd5b82602001516001600160a01b03166108fc82606001519081150290604051600060405180830381858888f19350505050158015610a5e573d6000803e3d6000fd5b505b600082516003811115610a7557610a756119da565b03610ae95781602001516001600160a01b03166323b872dd303385604001516040518463ffffffff1660e01b8152600401610ab293929190611ddb565b600060405180830381600087803b158015610acc57600080fd5b505af1158015610ae0573d6000803e3d6000fd5b50505050610c29565b600382516003811115610afe57610afe6119da565b03610b415781602001516001600160a01b031663f242432a3033856040015186606001516040518563ffffffff1660e01b8152600401610ab29493929190611dff565b600182516003811115610b5657610b566119da565b03610bdd57602082015160608301516040516323b872dd60e01b81526001600160a01b03909216916323b872dd91610b949130913391600401611ddb565b6020604051808303816000875af1158015610bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd79190611e37565b50610c29565b600282516003811115610bf257610bf26119da565b03610c29576060820151604051339180156108fc02916000818181858888f19350505050158015610c27573d6000803e3d6000fd5b505b5050506000908152600460205260409020600a810180546001600160a01b03191633179055600301805460ff19166001179055565b610c66611712565b610c70600061176c565b565b600354341015610c955760405163154b71ff60e21b815260040160405180910390fd5b600154811115610cb85760405163db68f95560e01b815260040160405180910390fd5b6000896003811115610ccc57610ccc6119da565b03610d38576040516323b872dd60e01b81526001600160a01b038916906323b872dd90610d0190339030908c90600401611ddb565b600060405180830381600087803b158015610d1b57600080fd5b505af1158015610d2f573d6000803e3d6000fd5b50505050610e5b565b6003896003811115610d4c57610d4c6119da565b03610d8357604051637921219560e11b81526001600160a01b0389169063f242432a90610d0190339030908c908c90600401611dff565b6001896003811115610d9757610d976119da565b03610e15576040516323b872dd60e01b81526001600160a01b038916906323b872dd90610dcc90339030908b90600401611ddb565b6020604051808303816000875af1158015610deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0f9190611e37565b50610e5b565b6002896003811115610e2957610e296119da565b03610e5b57600354610e3b9087611e59565b341015610e5b57604051636f8abb2160e11b815260040160405180910390fd5b600060405180608001604052808b6003811115610e7a57610e7a6119da565b81526020018a6001600160a01b0316815260200189815260200188815250905060006040518060800160405280886003811115610eb957610eb96119da565b8152602001876001600160a01b031681526020018681526020018581525090506000600260008154610eea90611dab565b91829055506040805160e081018252828152336020820152919250600091908101610f158742611e59565b81526000602080830182905260408084018990526060808501899052608090940183905286835260048252918290208451815590840151600180830180546001600160a01b0319166001600160a01b0390931692909217909155918401516002820155918301516003808401805495965086959293909260ff1916918490811115610fa257610fa26119da565b021790555060808201518051600483018054909190829060ff19166001836003811115610fd157610fd16119da565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b0319909116178155604082015160018083019190915560609092015160029091015560a0830151805160078401805492939092839160ff1990911690836003811115611042576110426119da565b021790555060208201518154610100600160a81b0319166101006001600160a01b03928316021782556040830151600183015560609092015160029091015560c09290920151600a9190910180546001600160a01b0319169190921617905550505050505050505050505050565b6110b86117bc565b600082815260046020908152604091829020825160e0810184528154815260018201546001600160a01b031692810192909252600281015492820192909252600380830154919291606084019160ff9091169081111561111a5761111a6119da565b600381111561112b5761112b6119da565b81526040805160808101909152600483018054602090930192829060ff16600381111561115a5761115a6119da565b600381111561116b5761116b6119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff1660038111156111ea576111ea6119da565b60038111156111fb576111fb6119da565b815281546001600160a01b03610100909104811660208084019190915260018401546040840152600290930154606090920191909152918352600a93909301541691015292915050565b6000818152600460209081526040808320815160e0810183528154815260018201546001600160a01b031693810193909352600281015491830191909152600380820154606084019160ff909116908111156112a3576112a36119da565b60038111156112b4576112b46119da565b81526040805160808101909152600483018054602090930192829060ff1660038111156112e3576112e36119da565b60038111156112f4576112f46119da565b81526020016000820160019054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820154815250508152602001600782016040518060800160405290816000820160009054906101000a900460ff166003811115611373576113736119da565b6003811115611384576113846119da565b8152815461010090046001600160a01b0390811660208084019190915260018401546040840152600290930154606090920191909152918352600a9390930154811691830191909152608083015191830151929350909116331461142a5760405162461bcd60e51b815260206004820152601a60248201527f416c726561647920636c61696d656420627920736f6d656f6e6500000000000060448201526064016103ac565b60c08201516001600160a01b0316156114855760405162461bcd60e51b815260206004820152601a60248201527f416c726561647920636c61696d656420627920736f6d656f6e6500000000000060448201526064016103ac565b60008151600381111561149a5761149a6119da565b036115125780602001516001600160a01b03166323b872dd30846020015184604001516040518463ffffffff1660e01b81526004016114db93929190611ddb565b600060405180830381600087803b1580156114f557600080fd5b505af1158015611509573d6000803e3d6000fd5b5050505061166a565b600381516003811115611527576115276119da565b0361156e5780602001516001600160a01b031663f242432a308460200151846040015185606001516040518563ffffffff1660e01b81526004016114db9493929190611dff565b600181516003811115611583576115836119da565b0361160d576020808201519083015160608301516040516323b872dd60e01b81526001600160a01b03909316926323b872dd926115c4923092600401611ddb565b6020604051808303816000875af11580156115e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116079190611e37565b5061166a565b600281516003811115611622576116226119da565b0361166a5781602001516001600160a01b03166108fc82606001519081150290604051600060405180830381858888f19350505050158015611668573d6000803e3d6000fd5b505b505060009081526004602052604090206003908101805460ff19169091179055565b611694611712565b600355565b6116a1611712565b6001600160a01b0381166117065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ac565b61170f8161176c565b50565b6000546001600160a01b03163314610c705760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160e08101825260008082526020820181905291810182905290606082019081526020016118186040805160808101909152806000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152604080516080810182526000808252602082810182905292820181905260608201529101908152600060209091015290565b60006020828403121561185e57600080fd5b81356001600160e01b03198116811461187657600080fd5b9392505050565b80356001600160a01b038116811461189457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156118d8576118d8611899565b604052919050565b600082601f8301126118f157600080fd5b813567ffffffffffffffff81111561190b5761190b611899565b61191e601f8201601f19166020016118af565b81815284602083860101111561193357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561196657600080fd5b61196f8561187d565b935061197d6020860161187d565b925060408501359150606085013567ffffffffffffffff8111156119a057600080fd5b6119ac878288016118e0565b91505092959194509250565b600080604083850312156119cb57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b6004811061170f57634e487b7160e01b600052602160045260246000fd5b8051611a19816119f0565b82526020818101516001600160a01b03169083015260408082015190830152606090810151910152565b80518252602081015160018060a01b0380821660208501526040830151604085015260608301519150611a75826119f0565b81606085015260808301519150611a8f6080850183611a0e565b60a08301519150611aa4610100850183611a0e565b8060c08401511661018085015250505050565b6020808252825182820181905260009190848201906040850190845b81811015611afa57611ae6838551611a43565b928401926101a09290920191600101611ad3565b50909695505050505050565b600060208284031215611b1857600080fd5b5035919050565b80356004811061189457600080fd5b60008060008060008060008060006101208a8c031215611b4d57600080fd5b611b568a611b1f565b9850611b6460208b0161187d565b975060408a0135965060608a01359550611b8060808b01611b1f565b9450611b8e60a08b0161187d565b935060c08a0135925060e08a013591506101008a013590509295985092959850929598565b6101a081016103628284611a43565b600082601f830112611bd357600080fd5b8135602067ffffffffffffffff821115611bef57611bef611899565b8160051b611bfe8282016118af565b9283528481018201928281019087851115611c1857600080fd5b83870192505b84831015611c3757823582529183019190830190611c1e565b979650505050505050565b600080600080600060a08688031215611c5a57600080fd5b611c638661187d565b9450611c716020870161187d565b9350604086013567ffffffffffffffff80821115611c8e57600080fd5b611c9a89838a01611bc2565b94506060880135915080821115611cb057600080fd5b611cbc89838a01611bc2565b93506080880135915080821115611cd257600080fd5b50611cdf888289016118e0565b9150509295509295909350565b600080600080600060a08688031215611d0457600080fd5b611d0d8661187d565b9450611d1b6020870161187d565b93506040860135925060608601359150608086013567ffffffffffffffff811115611d4557600080fd5b611cdf888289016118e0565b600060208284031215611d6357600080fd5b6118768261187d565b634e487b7160e01b600052601160045260246000fd5b8181038181111561036257610362611d6c565b634e487b7160e01b600052603260045260246000fd5b600060018201611dbd57611dbd611d6c565b5060010190565b600081611dd357611dd3611d6c565b506000190190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b600060208284031215611e4957600080fd5b8151801515811461187657600080fd5b8082018082111561036257610362611d6c56fea2646970667358221220af9b09a8564fbb64625671e7cb2d1d646cefb70f4913df274b2b0840df5c989264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 698,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "s_expiryTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 700,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "s_counter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 703,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "s_boxFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 708,
        "contract": "contracts/LockBox.sol:LockBox",
        "label": "s_lockBoxInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(LockBoxInfo)746_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(AssetType)713": {
        "encoding": "inplace",
        "label": "enum LockBox.AssetType",
        "numberOfBytes": "1"
      },
      "t_enum(Status)718": {
        "encoding": "inplace",
        "label": "enum LockBox.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(LockBoxInfo)746_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LockBox.LockBoxInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LockBoxInfo)746_storage"
      },
      "t_struct(Asset)728_storage": {
        "encoding": "inplace",
        "label": "struct LockBox.Asset",
        "members": [
          {
            "astId": 721,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(AssetType)713"
          },
          {
            "astId": 723,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 725,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 727,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetQuantity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LockBoxInfo)746_storage": {
        "encoding": "inplace",
        "label": "struct LockBox.LockBoxInfo",
        "members": [
          {
            "astId": 730,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "boxId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 732,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 734,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "expiryTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 737,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "status",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(Status)718"
          },
          {
            "astId": 740,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetA",
            "offset": 0,
            "slot": "4",
            "type": "t_struct(Asset)728_storage"
          },
          {
            "astId": 743,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "assetB",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(Asset)728_storage"
          },
          {
            "astId": 745,
            "contract": "contracts/LockBox.sol:LockBox",
            "label": "claimedBy",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}